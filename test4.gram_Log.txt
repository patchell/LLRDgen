???????? $ Nullable Set(0)
grammar:  Token:NONTERMINAL Value:265 NULLABLE(0) START(1)
     FIRST['grammar'] { }
     FOLLOW['grammar'] { '$' }
*************  Print Out Grammar Structure************
TERMINALS['Terminals'] { 'IDENT','VARIDENT','+','-','*','/','.','(',')','=',';','^'
,'@','[',']',',','FOR','TO','STEP','DO','OD','NUMBER','INT','PROC','BEGIN','END','ϵ'
,'$' }
********** Non Terminals Set **********
NONTERMINALS['Non Terminals'] { 'grammar','program','Proc','OptInit','Proc_1','Proc_2'
,'ProcBody','statements','statements_1','statement','Assignment','expr','expr_1','term'
,'term_1','factor','ForStmt','ToPart','StepPart','DoPart','MemContents','MemContType'
,'BaseConstant','VarList','VarList_1','Var','Var_1','Var_2','Var_3','Dim' }
*********** Build Nullable Set **********
****************Create NOT nullable set ************************
----- Calc First Sets------
FIRST['grammar'] { 'ϵ' }
FIRST['program'] { 'INT','PROC','ϵ' }
FIRST['Proc'] { 'IDENT' }
FIRST['OptInit'] { '=','ϵ' }
FIRST['Proc_1'] { '(' }
FIRST['Proc_2'] { 'BEGIN' }
FIRST['ProcBody'] { 'IDENT','FOR' }
FIRST['statements'] { 'IDENT','FOR' }
FIRST['statements_1'] { ';','ϵ' }
FIRST['statement'] { 'IDENT','FOR' }
FIRST['Assignment'] { '=' }
FIRST['expr'] { '(','IDENT','NUMBER','@' }
FIRST['expr_1'] { '+','-','ϵ' }
FIRST['term'] { '(','IDENT','NUMBER','@' }
FIRST['term_1'] { '*','/','ϵ' }
FIRST['factor'] { '(','IDENT','NUMBER','@' }
FIRST['ForStmt'] { '(','IDENT','NUMBER','@' }
FIRST['ToPart'] { 'TO' }
FIRST['StepPart'] { 'STEP','ϵ' }
FIRST['DoPart'] { 'DO' }
FIRST['MemContents'] { 'IDENT' }
FIRST['MemContType'] { '(','^','ϵ' }
FIRST['BaseConstant'] { 'NUMBER','@' }
FIRST['VarList'] { '*' }
FIRST['VarList_1'] { ',','ϵ' }
FIRST['Var'] { '*' }
FIRST['Var_1'] { '*','ϵ' }
FIRST['Var_2'] { 'IDENT' }
FIRST['Var_3'] { '[','ϵ' }
FIRST['Dim'] { 'NUMBER' }
----- Calc Follow Sets------
------------ Follow Sets ---------------
FOLLOW['grammar'] { '$' }
FOLLOW['program'] { '$' }
FOLLOW['Proc'] { 'INT','PROC','$' }
FOLLOW['OptInit'] { '(' }
FOLLOW['Proc_1'] { 'INT','PROC','$' }
FOLLOW['Proc_2'] { }
FOLLOW['ProcBody'] { }
FOLLOW['statements'] { 'END','OD' }
FOLLOW['statements_1'] { 'END','OD' }
FOLLOW['statement'] { ';','END','OD' }
FOLLOW['Assignment'] { ';','END','OD' }
FOLLOW['expr'] { ')','TO' }
FOLLOW['expr_1'] { ')','TO' }
FOLLOW['term'] { '+','-',')','TO' }
FOLLOW['term_1'] { '+','-',')','TO' }
FOLLOW['factor'] { '*','/','+','-',')','TO' }
FOLLOW['ForStmt'] { }
FOLLOW['ToPart'] { }
FOLLOW['StepPart'] { 'DO' }
FOLLOW['DoPart'] { }
FOLLOW['MemContents'] { '*','/','+','-',')','TO' }
FOLLOW['MemContType'] { '=' }
FOLLOW['BaseConstant'] { '*','/','+','-',')','TO' }
FOLLOW['VarList'] { 'INT','PROC','$' }
FOLLOW['VarList_1'] { 'INT','PROC','$' }
FOLLOW['Var'] { ',','INT','PROC','$' }
FOLLOW['Var_1'] { 'IDENT' }
FOLLOW['Var_2'] { ',','INT','PROC','$' }
FOLLOW['Var_3'] { }
FOLLOW['Dim'] { ']' }
---------------- Create Parse Table --------------
TerminalSymbol:IDENT
TerminalSymbol:VARIDENT
TerminalSymbol:+
TerminalSymbol:-
TerminalSymbol:*
TerminalSymbol:/
TerminalSymbol:.
TerminalSymbol:(
TerminalSymbol:)
TerminalSymbol:=
TerminalSymbol:;
TerminalSymbol:^
TerminalSymbol:@
TerminalSymbol:[
TerminalSymbol:]
TerminalSymbol:,
TerminalSymbol:FOR
TerminalSymbol:TO
TerminalSymbol:STEP
TerminalSymbol:DO
TerminalSymbol:OD
TerminalSymbol:NUMBER
TerminalSymbol:INT
TerminalSymbol:PROC
TerminalSymbol:BEGIN
TerminalSymbol:END
TerminalSymbol:ϵ
TerminalSymbol:$
  By Rule 1 Add grammar-> program ==> Table(grammar, ϵ)
  By Rule 2a Add grammar-> program ==> Table(grammar, $)
  By Rule 2b Add grammar-> program ==> Table(grammar, $)
----
  By Rule 1 Add program-> INT VarList program ==> Table(program, INT)
  By Rule 1 Add program-> PROC Proc program ==> Table(program, PROC)
  By Rule 1 Add program-> ϵ ==> Table(program, ϵ)
  By Rule 2a Add program-> ϵ ==> Table(program, $)
  By Rule 2b Add program-> ϵ ==> Table(program, $)
----
  By Rule 1 Add Proc-> IDENT OptInit Proc_1 ==> Table(Proc, IDENT)
----
  By Rule 1 Add OptInit-> = BaseConstant ==> Table(OptInit, =)
  By Rule 1 Add OptInit-> ϵ ==> Table(OptInit, ϵ)
  By Rule 2a Add OptInit-> ϵ ==> Table(OptInit, ()
----
  By Rule 1 Add Proc_1-> ( ) Proc_2 ==> Table(Proc_1, ()
----
  By Rule 1 Add Proc_2-> BEGIN ProcBody ==> Table(Proc_2, BEGIN)
----
  By Rule 1 Add ProcBody-> statements END ==> Table(ProcBody, IDENT)
  By Rule 1 Add ProcBody-> statements END ==> Table(ProcBody, FOR)
----
  By Rule 1 Add statements-> statement statements_1 ==> Table(statements, IDENT)
  By Rule 1 Add statements-> statement statements_1 ==> Table(statements, FOR)
----
  By Rule 1 Add statements_1-> ; statement statements_1 ==> Table(statements_1, ;)
  By Rule 1 Add statements_1-> ϵ ==> Table(statements_1, ϵ)
  By Rule 2a Add statements_1-> ϵ ==> Table(statements_1, END)
  By Rule 2a Add statements_1-> ϵ ==> Table(statements_1, OD)
----
  By Rule 1 Add statement-> IDENT MemContType Assignment ==> Table(statement, IDENT)
  By Rule 1 Add statement-> FOR ForStmt ==> Table(statement, FOR)
----
  By Rule 1 Add Assignment-> = expr ==> Table(Assignment, =)
----
  By Rule 1 Add expr-> term expr_1 ==> Table(expr, ()
  By Rule 1 Add expr-> term expr_1 ==> Table(expr, IDENT)
  By Rule 1 Add expr-> term expr_1 ==> Table(expr, NUMBER)
  By Rule 1 Add expr-> term expr_1 ==> Table(expr, @)
----
  By Rule 1 Add expr_1-> + term expr_1 ==> Table(expr_1, +)
  By Rule 1 Add expr_1-> - term expr_1 ==> Table(expr_1, -)
  By Rule 1 Add expr_1-> ϵ ==> Table(expr_1, ϵ)
  By Rule 2a Add expr_1-> ϵ ==> Table(expr_1, ))
  By Rule 2a Add expr_1-> ϵ ==> Table(expr_1, TO)
----
  By Rule 1 Add term-> factor term_1 ==> Table(term, ()
  By Rule 1 Add term-> factor term_1 ==> Table(term, IDENT)
  By Rule 1 Add term-> factor term_1 ==> Table(term, NUMBER)
  By Rule 1 Add term-> factor term_1 ==> Table(term, @)
----
  By Rule 1 Add term_1-> * factor term_1 ==> Table(term_1, *)
  By Rule 1 Add term_1-> / factor term_1 ==> Table(term_1, /)
  By Rule 1 Add term_1-> ϵ ==> Table(term_1, ϵ)
  By Rule 2a Add term_1-> ϵ ==> Table(term_1, +)
  By Rule 2a Add term_1-> ϵ ==> Table(term_1, -)
  By Rule 2a Add term_1-> ϵ ==> Table(term_1, ))
  By Rule 2a Add term_1-> ϵ ==> Table(term_1, TO)
----
  By Rule 1 Add factor-> MemContents ==> Table(factor, IDENT)
  By Rule 1 Add factor-> BaseConstant ==> Table(factor, NUMBER)
  By Rule 1 Add factor-> BaseConstant ==> Table(factor, @)
  By Rule 1 Add factor-> ( expr ) ==> Table(factor, ()
----
  By Rule 1 Add ForStmt-> expr ToPart ==> Table(ForStmt, ()
  By Rule 1 Add ForStmt-> expr ToPart ==> Table(ForStmt, IDENT)
  By Rule 1 Add ForStmt-> expr ToPart ==> Table(ForStmt, NUMBER)
  By Rule 1 Add ForStmt-> expr ToPart ==> Table(ForStmt, @)
----
  By Rule 1 Add ToPart-> TO expr StepPart DoPart ==> Table(ToPart, TO)
----
  By Rule 1 Add StepPart-> STEP expr ==> Table(StepPart, STEP)
  By Rule 1 Add StepPart-> ϵ ==> Table(StepPart, ϵ)
  By Rule 2a Add StepPart-> ϵ ==> Table(StepPart, DO)
----
  By Rule 1 Add DoPart-> DO statements OD ==> Table(DoPart, DO)
----
  By Rule 1 Add MemContents-> IDENT MemContType ==> Table(MemContents, IDENT)
----
  By Rule 1 Add MemContType-> ( expr ) ==> Table(MemContType, ()
  By Rule 1 Add MemContType-> ^ ==> Table(MemContType, ^)
  By Rule 1 Add MemContType-> ϵ ==> Table(MemContType, ϵ)
  By Rule 2a Add MemContType-> ϵ ==> Table(MemContType, =)
----
  By Rule 1 Add BaseConstant-> NUMBER ==> Table(BaseConstant, NUMBER)
  By Rule 1 Add BaseConstant-> @ MemContents ϵ ==> Table(BaseConstant, @)
----
  By Rule 1 Add VarList-> Var VarList_1 ==> Table(VarList, *)
----
  By Rule 1 Add VarList_1-> , Var VarList_1 ==> Table(VarList_1, ,)
  By Rule 1 Add VarList_1-> ϵ ==> Table(VarList_1, ϵ)
  By Rule 2a Add VarList_1-> ϵ ==> Table(VarList_1, INT)
  By Rule 2a Add VarList_1-> ϵ ==> Table(VarList_1, PROC)
  By Rule 2a Add VarList_1-> ϵ ==> Table(VarList_1, $)
  By Rule 2b Add VarList_1-> ϵ ==> Table(VarList_1, $)
----
  By Rule 1 Add Var-> Var_1 Var_2 ==> Table(Var, *)
----
  By Rule 1 Add Var_1-> * Var_1 ==> Table(Var_1, *)
  By Rule 1 Add Var_1-> ϵ ==> Table(Var_1, ϵ)
  By Rule 2a Add Var_1-> ϵ ==> Table(Var_1, IDENT)
----
  By Rule 1 Add Var_2-> IDENT Var_3 ==> Table(Var_2, IDENT)
----
  By Rule 1 Add Var_3-> [ Dim ] ==> Table(Var_3, [)
  By Rule 1 Add Var_3-> ϵ ==> Table(Var_3, ϵ)
----
  By Rule 1 Add Dim-> NUMBER ==> Table(Dim, NUMBER)
----
Table Entries = 77
------------ Check For Conflicts-------------
