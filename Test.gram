TOKEN IDENT = 256 "IDENT"
TOKEN NUMBER "NUMBER"
TOKEN	MODULE		"MODULE"
TOKEN	RETURN		"RETURN"
TOKEN	PROC		"PROC"
TOKEN	FUNC		"FUNC"
TOKEN	FUNC_IDENT	"FUNC_IDENT"
TOKEN	PROC_IDENT	"PROC_IDENT"
TOKEN	IF			"IF"
TOKEN	FOR			"FOR"
TOKEN	WHILE		"WHILE"
TOKEN	DO			"DO"
TOKEN	OD			"OD"
TOKEN	EXIT		"EXIT"
TOKEN	THEN		"THEN"
TOKEN	FI			"FI"
TOKEN	ELSEIF		"ELSEIF"
TOKEN	ELSE		"ELSE"
TOKEN	UNTILL		"UNTILL"
TOKEN	TO			"TO"
TOKEN	STEP		"STEP"
TOKEN	ASM			"ASM"
TOKEN	ENDASM		"ENDASM"
TOKEN	OR			"OR"
TOKEN	AND			"AND"
TOKEN	GTEQ		"GTEQ"
TOKEN	LTEQ		"LTEQ"
TOKEN	DEFINE		"DEFINE"
TOKEN	TYPE		"TYPE"
TOKEN	RECORDTYPE	"RECORDTYPE"
TOKEN	BOOL		"BOOL"
TOKEN	CHAR		"CHAR"
TOKEN	BYTE		"BYTE"
TOKEN	CARD		"CARD"
TOKEN	INT			"INT"
TOKEN	POINTER		"POINTER"
TOKEN	ARRAY		"ARRAY"
TOKEN	BEGIN		"BEGIN"
TOKEN	END			"END"
TOKEN	MOD			"MOD"
TOKEN	LSH			"LSH"
TOKEN	RSH			"RSH"

GRAMMAR
grammar -> expr;


expr	-> term expr_1;
expr_1	-> '+' term expr_1
		-> .
		;

term	-> factor term_1;
term_1	-> '*' factor term_1
		-> .
		;

factor -> 'IDENT'
       -> '(' expr ')'
       ;
