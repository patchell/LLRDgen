???????? $ Nullable Set(0)
**************** SymbolTable *****************
CBin::FOR  No Data
CBin::==/  No Data
CBin::POINTER  No Data
CBin::LTEQ  No Data
CBin::==+  No Data
CBin::==*  No Data
CBin::==%  No Data
CBin::LSH  No Data
CBin::==&  No Data
CBin::==!  No Data
CBin::WHILE  No Data
CBin::ENDASM  No Data
CBin::ASM  No Data
CBin::ROUTINES  No Data
CBin::GTEQ  No Data
CBin::IF  No Data
CBin::RECORDTYPE  No Data
CBin::MODULE  No Data
CBin::STEP  No Data
CBin::BOOL  No Data
CBin::END  No Data
CBin::ARRAY  No Data
CBin::RSH  No Data
CBin::ELSE  No Data
CBin::AND  No Data
CBin::!  No Data
CBin::FUNC_IDENT  No Data
CBin::#  No Data
CBin::PROC  No Data
CBin::TO  No Data
CBin::CHAR  No Data
CBin::%  No Data
CBin::&  No Data
CBin::==RSH  No Data
CBin::BEGIN  No Data
CBin::(  No Data
CBin::)  No Data
CBin::IDENT  No Data
CBin::*  No Data
CBin::+  No Data
CBin::UNTILL  No Data
CBin::,  No Data
CBin::-  No Data
CBin::ELSEIF  No Data
CBin::.  No Data
CBin::/  No Data
CBin::OD  No Data
CBin::BYTE  No Data
CBin::CARD  No Data
CBin::DO  No Data
CBin::THEN  No Data
CBin::NUMBER  No Data
CBin::TYPE  No Data
CBin::RETURN  No Data
CBin::FI  No Data
CBin::INT  No Data
CBin::==LSH  No Data
CBin::;  No Data
CBin::<  No Data
CBin::=  No Data
CBin::OR  No Data
CBin::>  No Data
CBin::@  No Data
CBin::FUNC  No Data
CBin::==MOD  No Data
CBin::PROC_IDENT  No Data
CBin::==XOR  No Data
CBin::EXIT  No Data
CBin::GLOBALS  No Data
CBin::DEFINE  No Data
CBin::MOD  No Data
CBin::[  No Data
CBin::]  No Data
CBin::^  No Data
CBin::==-  No Data
^^^^^^^^^^^^^^^ SymbolTable ^^^^^^^^^^^^^^^^^^^^^^
Action65:  Token:NONTERMINAL Value:265 NULLABLE(0) START(1)
	First Set'Action65 First Set' { }

	Follw Set'Action65 Follow Set' { '$' }

Parser:NT:MODULE
Parser:NT:MODULE
Parser:NT:PROC
Parser:NT:BEGIN
Parser:NT:END
Parser:NT:FUNC
Parser:NT:BEGIN
Parser:NT:END
Parser:NT:(
Parser:NT:)
Parser:NT:=
Parser:NT:FUNC_IDENT
Parser:NT:(
Parser:NT:)
Parser:NT:PROC_IDENT
Parser:NT:(
Parser:NT:)
Parser:NT:IDENT
Parser:NT:IF
Parser:NT:FOR
Parser:NT:WHILE
Parser:NT:DO
Parser:NT:EXIT
Parser:NT:PROC_IDENT
Parser:NT:FUNC_IDENT
Parser:NT:RETURN
Parser:NT:BEGIN
Parser:NT:END
Parser:NT:[
Parser:NT:]
Parser:NT:(
Parser:NT:)
Parser:NT:=
Parser:NT:==+
Parser:NT:==-
Parser:NT:==*
Parser:NT:==/
Parser:NT:==MOD
Parser:NT:==&
Parser:NT:==!
Parser:NT:==XOR
Parser:NT:==%
Parser:NT:==LSH
Parser:NT:==RSH
Parser:NT:THEN
Parser:NT:FI
Parser:NT:ELSEIF
Parser:NT:THEN
Parser:NT:ELSE
Parser:NT:OD
Parser:NT:UNTILL
Parser:NT:DO
Parser:NT:OD
Parser:NT:=
Parser:NT:TO
Parser:NT:DO
Parser:NT:OD
Parser:NT:STEP
Parser:NT:,
Parser:NT:OR
Parser:NT:AND
Parser:NT:>
Parser:NT:<
Parser:NT:GTEQ
Parser:NT:LTEQ
Parser:NT:=
Parser:NT:#
Parser:NT:%
Parser:NT:&
Parser:NT:!
Parser:NT:+
Parser:NT:-
Parser:NT:LSH
Parser:NT:RSH
Parser:NT:*
Parser:NT:/
Parser:NT:MOD
Parser:NT:-
Parser:NT:(
Parser:NT:)
Parser:NT:+
Parser:NT:-
Parser:NT:*
Parser:NT:BOOL
Parser:NT:CHAR
Parser:NT:BYTE
Parser:NT:INT
Parser:NT:CARD
Parser:NT:POINTER
Parser:NT:RECORDTYPE
Parser:NT:CHAR
Parser:NT:BYTE
Parser:NT:INT
Parser:NT:CARD
Parser:NT:BOOL
Parser:NT:;
Parser:NT:DEFINE
Parser:NT:TYPE
Parser:NT:RECORDTYPE
Parser:NT:CHAR
Parser:NT:BYTE
Parser:NT:INT
Parser:NT:CARD
Parser:NT:BOOL
Parser:NT:,
Parser:NT:=
Parser:NT:,
Parser:NT:=
Parser:NT:[
Parser:NT:]
Parser:NT:,
Parser:NT:=
Parser:NT:,
Parser:NT:,
Parser:NT:=
Parser:NT:POINTER
Parser:NT:ARRAY
Parser:NT:(
Parser:NT:)
Parser:NT:=
Parser:NT:[
Parser:NT:]
Parser:NT:,
Parser:NT:@
Parser:NT:(
Parser:NT:)
Parser:NT:^
Parser:NT:.
Parser:NT:IDENT
Parser:NT:NUMBER
*************  Print Out Grammar Structure************
PtrRef
ArithExpr
->  LogicalAND  LogicalOR_1
Start
RelOperation
->  RelEquals  RelOperation_1
Factor
->  Number
->  FUNCcall
->  (  ArithExpr  )
->  MemContents
AddExpr_1
->  +  ShifExpr  AddExpr_1
->  -  ShifExpr  AddExpr_1
->  ϵ
FUNCcall
->  FUNC_IDENT  (  VarDecls  )  PROCcall
->  PROC_IDENT  (  VarDecls  )  Statements
->  IDENT  MemContentsType  ASSIGNstmt  Statements
->  IF  IfStmt  Statements
->  FOR  ForStmt  Statements
->  WHILE  WhileLoop  Statements
->  DO  DoLoop  Statements
->  EXIT  Statements
->  PROC_IDENT  ProcCall  Statements
->  FUNC_IDENT  FuncCall  Statements
->  RETURN  OptReturnData  Statements
->  BEGIN  Statements  END  Statements
->  [  CodeBlock  ]
->  ϵ
PROCcall
ProcCall
FuncCall
DOloop
->  Statements  UNTILLstmt  OD  UNTILLstmt
->  UNTILL  CondExpr
->  ϵ
MultExpr_1
->  *  Unary  MultExpr_1
->  /  Unary  MultExpr_1
->  MOD  Unary  MultExpr_1
->  ϵ
ELSEIFlist_1
->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
->  ϵ
SysDecls
->  SysDecl  SysDecls_1
Module_1
->  MODULE  SysDecls  Routine  Module_1
->  ϵ
BitwiseOR_1
->  %  BitwiseAND  BitwiseOR_1
->  ϵ
MultExpr
->  Unary  MultExpr_1
LogicalAND_1
->  AND  RelOperation  LogicalAND_1
->  ϵ
DoLoop
FORloop
OptModifier
->  POINTER
->  ϵ
RecIdentLst
->  RecIdent  RecIdentLst_1  RecIdentLst_1
->  ,  RecIdent  RecIdentLst_1
->  ϵ
Unary
->  -  Unary
->  Factor
Routine
->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
->  ϵ
ProcInit
WhileLoop
ELSEIFlist
CondExpr
CardDecl
RecIdent
->  Ident  =  [  FieldInit  ]
->  ϵ
->  Ident  OptRecInit
Def
->  Ident  =  Constant
ProcBody_1
->  Statements
BitwiseAND
->  BitwiseXOR  BitwiseAND_1
ShifExpr
->  MultExpr  ShiftExpr_1
AddExpr
->  ShifExpr  AddExpr_1
BOOLDecl
->  Ident  OptInit  BOOLDecl_1
OptArrayInit_1
->  [  OptArrayInit_2  ]  OptArrayInit_2
->  CompConst  OptArrayInit_3
Ident
->  IDENT  Number
->  NUMBER
ASSIGNstmt
->  =  ArithExpr
->  ==+  ArithExpr
->  ==-  ArithExpr
->  ==*  ArithExpr
->  ==/  ArithExpr
->  ==MOD  ArithExpr
->  ==&  ArithExpr
->  ==!  ArithExpr
->  ==XOR  ArithExpr
->  ==%  ArithExpr
->  ==LSH  ArithExpr
->  ==RSH  ArithExpr
->  ϵ
OptArrayInit_2
ForStmt
OptArrayInit_3
->  ,  CompConst  OptArrayInit_3
->  ϵ
FieldInit
BOOLDecl_1
->  ,  Ident  OptInit  BOOLDecl_1
->  ϵ
RecordDecl
->  RecIdentLst
VarDecls
->  RECORDTYPE  RecIdentLst
->  CHAR  CharDecl
->  BYTE  ByteDecl
->  INT  IntDecl
->  CARD  CardDecl
->  BOOL  BOOLDecl
->  ϵ
STEPoption
->  STEP  ArithExpr
->  ϵ
Finish
->  ArithExpr
Address
->  CompConst
Module
->  SysDecls  Routine  Module_1
ElseIf
ELSEstmt
->  ELSE  Statements
->  ϵ
RelEquals
->  BitwiseOR  RelEquals_1
SysDecl
->  DEFINE  DefList
->  TYPE  RecIdentList
->  RECORDTYPE  Modifier  VarList
->  CHAR  Modifier  VarList
->  BYTE  Modifier  VarList
->  INT  Modifier  VarList
->  CARD  Modifier  VarList
->  BOOL  VarList
->  ϵ
DefList
->  Def  DefList_1
RecIdentList
->  RecIdent  RecIdentList
ProcDecl
->  Ident  ProcInit  (  VarDecls  )  ProcInit
->  =  Address
->  ϵ
WHILEloop
->  CondExpr  DO  Statements  OD  FORloop
->  Identifier  =  Start  TO  Finish  STEPoption  DO  Statements  OD  Start
->  ArithExpr
BaseCompConst
->  Ident
->  Number
->  PtrRef
->  *
Modifier
->  POINTER
->  ARRAY  ArrayStuff
->  ϵ
Constant
ShiftExpr_1
->  LSH  MultExpr  ShiftExpr_1
->  RSH  MultExpr  ShiftExpr_1
->  ϵ
ArrayStuff
->  (  CompConst  )  OptArrayInit
->  ϵ
RelEquals_1
->  =  BitwiseOR  RelEquals_1
->  #  BitwiseOR  RelEquals_1
->  ϵ
SimpleRelExpr_1
->  !  AddExpr  SimpleRelExpr_1
->  ϵ
RecIdentList_1
->  ,  RecIdent  RecIdentList_1
->  ϵ
Program
->  MODULE  Module
->  Module
ByteDecl
VarList_1
->  ,  VarName  VarList_1
->  ϵ
Identifier
Action65
->  Program
LogicalOR_1
->  OR  LogicalAND  LogicalOR_1
->  ϵ
VarList
->  VarName  VarList_1
OptInit
->  =  CompConst
->  ϵ
CodeBlock_1
->  ,  CompConst  CodeBlock_1
->  ϵ
CompConst_1
->  +  BaseCompConst  CompConst_1
->  -  BaseCompConst  CompConst_1
->  ϵ
SysDecls_1
->  ;  SysDecl  SysDecls_1
->  ϵ
BitwiseAND_1
->  &  BitwiseXOR  BitwiseAND_1
->  ϵ
MemContents
->  Ident  MemContentsType
->  @  Ident
CodeBlock
->  CompConst  CodeBlock_1
LogicalAND
->  RelOperation  LogicalAND_1
OptArrayInit
->  =  OptArrayInit_1
->  ϵ
UNTILLstmt
OptRecInit
->  =  Address
->  ϵ
OptReturnData
->  (  ArithExpr  )
->  ϵ
RelOperation_1
->  >  RelEquals  RelOperation_1
->  <  RelEquals  RelOperation_1
->  GTEQ  RelEquals  RelOperation_1
->  LTEQ  RelEquals  RelOperation_1
->  ϵ
FundType
->  BOOL
->  CHAR  OptModifier
->  BYTE  OptModifier
->  INT  OptModifier
->  CARD  OptModifier
Number
CompConst
->  BaseCompConst  CompConst_1
MemContentsType
->  (  ArithExpr  )
->  ^
->  .  Ident
->  ϵ
BitwiseOR
->  BitwiseAND  BitwiseOR_1
BitwiseXOR
->  AddExpr  SimpleRelExpr_1
DefList_1
->  ,  Def  DefList_1
->  ϵ
VarName
->  Ident  OptInit
Statements
RecIdentLst_1
ProcBody
->  SysDecls  ProcBody_1
IFstmt
->  CondExpr  THEN  Statements  ELSEIFlist  ELSEstmt  FI  ELSEIFlist
->  ElseIf  ELSEIFlist_1
CharDecl
IfStmt
IntDecl
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
********** Non Terminals Set **********
'Non Terminals' { 'Action65','Program','Module','Module_1','Routine','ProcBody','ProcBody_1','ProcDecl','Address','OptReturnData','ASSIGNstmt','ELSEIFlist_1','ELSEstmt','Finish','STEPoption','CodeBlock','CodeBlock_1','ArithExpr','LogicalOR_1','LogicalAND','LogicalAND_1','RelOperation','RelOperation_1','RelEquals','RelEquals_1','BitwiseOR','BitwiseOR_1','BitwiseAND','BitwiseAND_1','BitwiseXOR','SimpleRelExpr_1','AddExpr','AddExpr_1','ShifExpr','ShiftExpr_1','MultExpr','MultExpr_1','Unary','Factor','CompConst','CompConst_1','BaseCompConst','FundType','OptModifier','VarDecls','SysDecls','SysDecls_1','SysDecl','DefList','DefList_1','Def','RecIdentList','RecIdent','RecIdentLst','OptRecInit','BOOLDecl','BOOLDecl_1','VarList','VarList_1','VarName','OptInit','Modifier','ArrayStuff','OptArrayInit','OptArrayInit_1','OptArrayInit_3','MemContents','MemContentsType','Ident' }
*********** Build Nullable Set **********
----- Generate Nullables-------
Action65->
Program->
Program->
Module->
Module_1->
Module_1->
Routine->
Routine->
Routine->
ProcBody->
ProcBody_1->
ProcDecl->
ProcDecl->
ProcDecl->
Address->
OptReturnData->
OptReturnData->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ELSEIFlist_1->
ELSEIFlist_1->
ELSEstmt->
ELSEstmt->
Finish->
STEPoption->
STEPoption->
CodeBlock->
CodeBlock_1->
CodeBlock_1->
ArithExpr->
LogicalOR_1->
LogicalOR_1->
LogicalAND->
LogicalAND_1->
LogicalAND_1->
RelOperation->
RelOperation_1->
RelOperation_1->
RelOperation_1->
RelOperation_1->
RelOperation_1->
RelEquals->
RelEquals_1->
RelEquals_1->
RelEquals_1->
BitwiseOR->
BitwiseOR_1->
BitwiseOR_1->
BitwiseAND->
BitwiseAND_1->
BitwiseAND_1->
BitwiseXOR->
SimpleRelExpr_1->
SimpleRelExpr_1->
AddExpr->
AddExpr_1->
AddExpr_1->
AddExpr_1->
ShifExpr->
ShiftExpr_1->
ShiftExpr_1->
ShiftExpr_1->
MultExpr->
MultExpr_1->
MultExpr_1->
MultExpr_1->
MultExpr_1->
Unary->
Unary->
Factor->
Factor->
Factor->
Factor->
CompConst->
CompConst_1->
CompConst_1->
CompConst_1->
BaseCompConst->
BaseCompConst->
BaseCompConst->
BaseCompConst->
FundType->
FundType->
FundType->
FundType->
FundType->
OptModifier->
OptModifier->
VarDecls->
VarDecls->
VarDecls->
VarDecls->
VarDecls->
VarDecls->
VarDecls->
SysDecls->
SysDecls_1->
SysDecls_1->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
DefList->
DefList_1->
DefList_1->
Def->
RecIdentList->
RecIdent->
RecIdent->
RecIdent->
RecIdentLst->
RecIdentLst->
RecIdentLst->
OptRecInit->
OptRecInit->
BOOLDecl->
BOOLDecl_1->
BOOLDecl_1->
VarList->
VarList_1->
VarList_1->
VarName->
OptInit->
OptInit->
Modifier->
Modifier->
Modifier->
ArrayStuff->
ArrayStuff->
OptArrayInit->
OptArrayInit->
OptArrayInit_1->
OptArrayInit_1->
OptArrayInit_3->
OptArrayInit_3->
MemContents->
MemContents->
MemContentsType->
MemContentsType->
MemContentsType->
MemContentsType->
Ident->
Ident->
************ Nullable Iteration 1 *********
Action65->
Program->
Program->
Module->
Module_1->
Module_1->
Routine->
Routine->
Routine->
ProcBody->
ProcBody_1->
ProcDecl->
ProcDecl->
ProcDecl->
Address->
OptReturnData->
OptReturnData->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ASSIGNstmt->
ELSEIFlist_1->
ELSEIFlist_1->
ELSEstmt->
ELSEstmt->
Finish->
STEPoption->
STEPoption->
CodeBlock->
CodeBlock_1->
CodeBlock_1->
ArithExpr->
LogicalOR_1->
LogicalOR_1->
LogicalAND->
LogicalAND_1->
LogicalAND_1->
RelOperation->
RelOperation_1->
RelOperation_1->
RelOperation_1->
RelOperation_1->
RelOperation_1->
RelEquals->
RelEquals_1->
RelEquals_1->
RelEquals_1->
BitwiseOR->
BitwiseOR_1->
BitwiseOR_1->
BitwiseAND->
BitwiseAND_1->
BitwiseAND_1->
BitwiseXOR->
SimpleRelExpr_1->
SimpleRelExpr_1->
AddExpr->
AddExpr_1->
AddExpr_1->
AddExpr_1->
ShifExpr->
ShiftExpr_1->
ShiftExpr_1->
ShiftExpr_1->
MultExpr->
MultExpr_1->
MultExpr_1->
MultExpr_1->
MultExpr_1->
Unary->
Unary->
Factor->
Factor->
Factor->
Factor->
CompConst->
CompConst_1->
CompConst_1->
CompConst_1->
BaseCompConst->
BaseCompConst->
BaseCompConst->
BaseCompConst->
FundType->
FundType->
FundType->
FundType->
FundType->
OptModifier->
OptModifier->
VarDecls->
VarDecls->
VarDecls->
VarDecls->
VarDecls->
VarDecls->
VarDecls->
SysDecls->
SysDecls_1->
SysDecls_1->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
SysDecl->
DefList->
DefList_1->
DefList_1->
Def->
RecIdentList->
RecIdent->
RecIdent->
RecIdent->
RecIdentLst->
RecIdentLst->
RecIdentLst->
OptRecInit->
OptRecInit->
BOOLDecl->
BOOLDecl_1->
BOOLDecl_1->
VarList->
VarList_1->
VarList_1->
VarName->
OptInit->
OptInit->
Modifier->
Modifier->
Modifier->
ArrayStuff->
ArrayStuff->
OptArrayInit->
OptArrayInit->
OptArrayInit_1->
OptArrayInit_1->
OptArrayInit_3->
OptArrayInit_3->
MemContents->
MemContents->
MemContentsType->
MemContentsType->
MemContentsType->
MemContentsType->
Ident->
Ident->
************ Nullable Iteration 2 *********
----- Done Generate Nullables-------
'Nullables' { 'Module_1','Routine','ProcDecl','OptReturnData','ASSIGNstmt','ELSEIFlist_1','ELSEstmt','STEPoption','CodeBlock_1','LogicalOR_1','LogicalAND_1','RelOperation_1','RelEquals_1','BitwiseOR_1','BitwiseAND_1','SimpleRelExpr_1','AddExpr_1','ShiftExpr_1','MultExpr_1','CompConst_1','OptModifier','VarDecls','SysDecls_1','SysDecl','DefList_1','RecIdent','RecIdentLst','OptRecInit','BOOLDecl_1','VarList_1','OptInit','Modifier','ArrayStuff','OptArrayInit','OptArrayInit_3','MemContentsType' }

'Non Terminals' { 'Action65','Program','Module','Module_1','Routine','ProcBody','ProcBody_1','ProcDecl','Address','OptReturnData','ASSIGNstmt','ELSEIFlist_1','ELSEstmt','Finish','STEPoption','CodeBlock','CodeBlock_1','ArithExpr','LogicalOR_1','LogicalAND','LogicalAND_1','RelOperation','RelOperation_1','RelEquals','RelEquals_1','BitwiseOR','BitwiseOR_1','BitwiseAND','BitwiseAND_1','BitwiseXOR','SimpleRelExpr_1','AddExpr','AddExpr_1','ShifExpr','ShiftExpr_1','MultExpr','MultExpr_1','Unary','Factor','CompConst','CompConst_1','BaseCompConst','FundType','OptModifier','VarDecls','SysDecls','SysDecls_1','SysDecl','DefList','DefList_1','Def','RecIdentList','RecIdent','RecIdentLst','OptRecInit','BOOLDecl','BOOLDecl_1','VarList','VarList_1','VarName','OptInit','Modifier','ArrayStuff','OptArrayInit','OptArrayInit_1','OptArrayInit_3','MemContents','MemContentsType','Ident' }

****************Create NOT nullable set ************************
----- Calc First Sets------
******* Create First Set Ver 2 ********
###### First Set Iteration #1
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
TRUE
'Action65 First Set' { } U 'Program First Set' { } => 'Action65 First Set' { }
'Action65 First Set' { }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE' }
'Program First Set' { 'MODULE' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
TRUE
'Program First Set' { 'MODULE' } U 'Module First Set' { } => 'Program First Set' { 'MODULE' }
'Program First Set' { 'MODULE' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
TRUE
'Module First Set' { } U 'SysDecls First Set' { } => 'Module First Set' { }
'Module First Set' { }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE' }
'Module_1 First Set' { 'MODULE' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC' }
'Routine First Set' { 'PROC' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC' }
'Routine First Set' { 'PROC','FUNC' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
TRUE
'ProcBody First Set' { } U 'SysDecls First Set' { } => 'ProcBody First Set' { }
'ProcBody First Set' { }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
TRUE
'ProcDecl First Set' { } U 'Ident First Set' { } => 'ProcDecl First Set' { }
'ProcDecl First Set' { }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { } U '= First Set' { '=' } => 'ProcDecl First Set' { '=' }
'ProcDecl First Set' { '=' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ' }
'ProcDecl First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ' }
'ProcDecl First Set' { '=','ϵ' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
TRUE
'Address First Set' { } U 'CompConst First Set' { } => 'Address First Set' { }
'Address First Set' { }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { } U '( First Set' { '(' } => 'OptReturnData First Set' { '(' }
'OptReturnData First Set' { '(' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=' }
'ASSIGNstmt First Set' { '=' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+' }
'ASSIGNstmt First Set' { '=','==+' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-' }
'ASSIGNstmt First Set' { '=','==+','==-' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*' }
'ASSIGNstmt First Set' { '=','==+','==-','==*' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF' }
'ELSEIFlist_1 First Set' { 'ELSEIF' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE' }
'ELSEstmt First Set' { 'ELSE' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP' }
'STEPoption First Set' { 'STEP' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
TRUE
'CodeBlock First Set' { } U 'CompConst First Set' { } => 'CodeBlock First Set' { }
'CodeBlock First Set' { }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',' }
'CodeBlock_1 First Set' { ',' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR' }
'LogicalOR_1 First Set' { 'OR' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND' }
'LogicalAND_1 First Set' { 'AND' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { } => 'RelOperation First Set' { }
'RelOperation First Set' { }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>' }
'RelOperation_1 First Set' { '>' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<' }
'RelOperation_1 First Set' { '>','<' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ' }
'RelOperation_1 First Set' { '>','<','GTEQ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
TRUE
'RelEquals First Set' { } U 'BitwiseOR First Set' { } => 'RelEquals First Set' { }
'RelEquals First Set' { }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=' }
'RelEquals_1 First Set' { '=' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#' }
'RelEquals_1 First Set' { '=','#' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
TRUE
'BitwiseOR First Set' { } U 'BitwiseAND First Set' { } => 'BitwiseOR First Set' { }
'BitwiseOR First Set' { }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%' }
'BitwiseOR_1 First Set' { '%' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
TRUE
'BitwiseAND First Set' { } U 'BitwiseXOR First Set' { } => 'BitwiseAND First Set' { }
'BitwiseAND First Set' { }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&' }
'BitwiseAND_1 First Set' { '&' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
TRUE
'BitwiseXOR First Set' { } U 'AddExpr First Set' { } => 'BitwiseXOR First Set' { }
'BitwiseXOR First Set' { }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!' }
'SimpleRelExpr_1 First Set' { '!' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
TRUE
'AddExpr First Set' { } U 'ShifExpr First Set' { } => 'AddExpr First Set' { }
'AddExpr First Set' { }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+' }
'AddExpr_1 First Set' { '+' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-' }
'AddExpr_1 First Set' { '+','-' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
TRUE
'ShifExpr First Set' { } U 'MultExpr First Set' { } => 'ShifExpr First Set' { }
'ShifExpr First Set' { }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH' }
'ShiftExpr_1 First Set' { 'LSH' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH' }
'ShiftExpr_1 First Set' { 'LSH','RSH' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
TRUE
'MultExpr First Set' { } U 'Unary First Set' { } => 'MultExpr First Set' { }
'MultExpr First Set' { }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*' }
'MultExpr_1 First Set' { '*' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/' }
'MultExpr_1 First Set' { '*','/' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD' }
'MultExpr_1 First Set' { '*','/','MOD' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
TRUE
'Unary First Set' { '-' } U 'Factor First Set' { } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { } U 'Number First Set' { } => 'Factor First Set' { }
'Factor First Set' { }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { } U 'FUNCcall First Set' { } => 'Factor First Set' { }
'Factor First Set' { } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ' }
'Factor First Set' { 'ϵ' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(' }
'Factor First Set' { 'ϵ','(' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
TRUE
'Factor First Set' { 'ϵ','(' } U 'MemContents First Set' { } => 'Factor First Set' { 'ϵ','(' }
'Factor First Set' { 'ϵ','(' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
TRUE
'CompConst First Set' { } U 'BaseCompConst First Set' { } => 'CompConst First Set' { }
'CompConst First Set' { }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+' }
'CompConst_1 First Set' { '+' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-' }
'CompConst_1 First Set' { '+','-' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
TRUE
'BaseCompConst First Set' { } U 'Ident First Set' { } => 'BaseCompConst First Set' { }
'BaseCompConst First Set' { }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { } U 'Number First Set' { } => 'BaseCompConst First Set' { }
'BaseCompConst First Set' { }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { }
'BaseCompConst First Set' { }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*' }
'BaseCompConst First Set' { '*' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL' }
'FundType First Set' { 'BOOL' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR' }
'FundType First Set' { 'BOOL','CHAR' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE' }
'FundType First Set' { 'BOOL','CHAR','BYTE' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER' }
'OptModifier First Set' { 'POINTER' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE' }
'VarDecls First Set' { 'RECORDTYPE' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR' }
'VarDecls First Set' { 'RECORDTYPE','CHAR' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
TRUE
'SysDecls First Set' { } U 'SysDecl First Set' { } => 'SysDecls First Set' { }
'SysDecls First Set' { } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ' }
'SysDecls First Set' { 'ϵ' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';' }
'SysDecls_1 First Set' { ';' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE' }
'SysDecl First Set' { 'DEFINE' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE' }
'SysDecl First Set' { 'DEFINE','TYPE' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
TRUE
'DefList First Set' { } U 'Def First Set' { } => 'DefList First Set' { }
'DefList First Set' { }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { } U ', First Set' { ',' } => 'DefList_1 First Set' { ',' }
'DefList_1 First Set' { ',' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
TRUE
'Def First Set' { } U 'Ident First Set' { } => 'Def First Set' { }
'Def First Set' { }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
TRUE
'RecIdentList First Set' { } U 'RecIdent First Set' { } => 'RecIdentList First Set' { }
'RecIdentList First Set' { }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
TRUE
'RecIdent First Set' { } U 'Ident First Set' { } => 'RecIdent First Set' { }
'RecIdent First Set' { }

RecIdent	->  ϵ
'RecIdent First Set' { } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ' }
'RecIdent First Set' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ' }
'RecIdent First Set' { 'ϵ' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
TRUE
'RecIdent First Set' { 'ϵ' } U 'Ident First Set' { } => 'RecIdent First Set' { 'ϵ' }
'RecIdent First Set' { 'ϵ' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',' }
'RecIdentLst First Set' { ',' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ' }
'RecIdentLst First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ' }
'RecIdentLst First Set' { ',','ϵ' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { } U '= First Set' { '=' } => 'OptRecInit First Set' { '=' }
'OptRecInit First Set' { '=' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
TRUE
'BOOLDecl First Set' { } U 'Ident First Set' { } => 'BOOLDecl First Set' { }
'BOOLDecl First Set' { }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',' }
'BOOLDecl_1 First Set' { ',' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
TRUE
'VarList First Set' { } U 'VarName First Set' { } => 'VarList First Set' { }
'VarList First Set' { }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { } U ', First Set' { ',' } => 'VarList_1 First Set' { ',' }
'VarList_1 First Set' { ',' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
TRUE
'VarName First Set' { } U 'Ident First Set' { } => 'VarName First Set' { }
'VarName First Set' { }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { } U '= First Set' { '=' } => 'OptInit First Set' { '=' }
'OptInit First Set' { '=' }

OptInit	->  ϵ
'OptInit First Set' { '=' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER' }
'Modifier First Set' { 'POINTER' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY' }
'Modifier First Set' { 'POINTER','ARRAY' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(' }
'ArrayStuff First Set' { '(' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=' }
'OptArrayInit First Set' { '=' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[' }
'OptArrayInit_1 First Set' { '[' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
TRUE
'OptArrayInit_1 First Set' { '[' } U 'CompConst First Set' { } => 'OptArrayInit_1 First Set' { '[' }
'OptArrayInit_1 First Set' { '[' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',' }
'OptArrayInit_3 First Set' { ',' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
TRUE
'MemContents First Set' { } U 'Ident First Set' { } => 'MemContents First Set' { }
'MemContents First Set' { }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { } U '@ First Set' { '@' } => 'MemContents First Set' { '@' }
'MemContents First Set' { '@' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { } U '( First Set' { '(' } => 'MemContentsType First Set' { '(' }
'MemContentsType First Set' { '(' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^' }
'MemContentsType First Set' { '(','^' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.' }
'MemContentsType First Set' { '(','^','.' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT' }
'Ident First Set' { 'IDENT' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #2  DONE!
###### First Set Iteration #2
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Action65 First Set' { } U 'Program First Set' { 'MODULE' } => 'Action65 First Set' { 'MODULE' }
'Action65 First Set' { 'MODULE' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE' }
'Program First Set' { 'MODULE' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
TRUE
'Program First Set' { 'MODULE' } U 'Module First Set' { } => 'Program First Set' { 'MODULE' }
'Program First Set' { 'MODULE' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
TRUE
'Address First Set' { } U 'CompConst First Set' { } => 'Address First Set' { }
'Address First Set' { }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
TRUE
'CodeBlock First Set' { } U 'CompConst First Set' { } => 'CodeBlock First Set' { }
'CodeBlock First Set' { }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { } => 'RelOperation First Set' { }
'RelOperation First Set' { }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
TRUE
'RelEquals First Set' { } U 'BitwiseOR First Set' { } => 'RelEquals First Set' { }
'RelEquals First Set' { }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
TRUE
'BitwiseOR First Set' { } U 'BitwiseAND First Set' { } => 'BitwiseOR First Set' { }
'BitwiseOR First Set' { }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
TRUE
'BitwiseAND First Set' { } U 'BitwiseXOR First Set' { } => 'BitwiseAND First Set' { }
'BitwiseAND First Set' { }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
TRUE
'BitwiseXOR First Set' { } U 'AddExpr First Set' { } => 'BitwiseXOR First Set' { }
'BitwiseXOR First Set' { }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
TRUE
'AddExpr First Set' { } U 'ShifExpr First Set' { } => 'AddExpr First Set' { }
'AddExpr First Set' { }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
TRUE
'ShifExpr First Set' { } U 'MultExpr First Set' { } => 'ShifExpr First Set' { }
'ShifExpr First Set' { }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(' }
'Factor First Set' { 'ϵ','(' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(' }
'Factor First Set' { 'ϵ','(' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(' }
'Factor First Set' { 'ϵ','(' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(' }
'Factor First Set' { 'ϵ','(' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
TRUE
'Factor First Set' { 'ϵ','(' } U 'MemContents First Set' { '@' } => 'Factor First Set' { 'ϵ','(','@' }
'Factor First Set' { 'ϵ','(','@' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
TRUE
'CompConst First Set' { } U 'BaseCompConst First Set' { '*' } => 'CompConst First Set' { '*' }
'CompConst First Set' { '*' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
TRUE
'DefList First Set' { } U 'Def First Set' { } => 'DefList First Set' { }
'DefList First Set' { }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
TRUE
'VarList First Set' { } U 'VarName First Set' { } => 'VarList First Set' { }
'VarList First Set' { }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[' }
'OptArrayInit_1 First Set' { '[' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
TRUE
'OptArrayInit_1 First Set' { '[' } U 'CompConst First Set' { '*' } => 'OptArrayInit_1 First Set' { '[','*' }
'OptArrayInit_1 First Set' { '[','*' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #3  DONE!
###### First Set Iteration #3
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Action65 First Set' { 'MODULE' } U 'Program First Set' { 'MODULE' } => 'Action65 First Set' { 'MODULE' }
'Action65 First Set' { 'MODULE' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE' }
'Program First Set' { 'MODULE' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
TRUE
'Program First Set' { 'MODULE' } U 'Module First Set' { 'PROC','FUNC' } => 'Program First Set' { 'MODULE','PROC','FUNC' }
'Program First Set' { 'MODULE','PROC','FUNC' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
TRUE
'Address First Set' { } U 'CompConst First Set' { '*' } => 'Address First Set' { '*' }
'Address First Set' { '*' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
TRUE
'CodeBlock First Set' { } U 'CompConst First Set' { '*' } => 'CodeBlock First Set' { '*' }
'CodeBlock First Set' { '*' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { } => 'RelOperation First Set' { }
'RelOperation First Set' { }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
TRUE
'RelEquals First Set' { } U 'BitwiseOR First Set' { } => 'RelEquals First Set' { }
'RelEquals First Set' { }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
TRUE
'BitwiseOR First Set' { } U 'BitwiseAND First Set' { } => 'BitwiseOR First Set' { }
'BitwiseOR First Set' { }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
TRUE
'BitwiseAND First Set' { } U 'BitwiseXOR First Set' { } => 'BitwiseAND First Set' { }
'BitwiseAND First Set' { }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
TRUE
'BitwiseXOR First Set' { } U 'AddExpr First Set' { } => 'BitwiseXOR First Set' { }
'BitwiseXOR First Set' { }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
TRUE
'AddExpr First Set' { } U 'ShifExpr First Set' { } => 'AddExpr First Set' { }
'AddExpr First Set' { }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@' }
'Factor First Set' { 'ϵ','(','@' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@' }
'Factor First Set' { 'ϵ','(','@' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@' }
'Factor First Set' { 'ϵ','(','@' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@' }
'Factor First Set' { 'ϵ','(','@' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*' }
'OptArrayInit_1 First Set' { '[','*' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #4  DONE!
###### First Set Iteration #4
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
TRUE
'Action65 First Set' { 'MODULE' } U 'Program First Set' { 'MODULE','PROC','FUNC' } => 'Action65 First Set' { 'MODULE','PROC','FUNC' }
'Action65 First Set' { 'MODULE','PROC','FUNC' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC' }
'Program First Set' { 'MODULE','PROC','FUNC' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { } => 'RelOperation First Set' { }
'RelOperation First Set' { }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
TRUE
'RelEquals First Set' { } U 'BitwiseOR First Set' { } => 'RelEquals First Set' { }
'RelEquals First Set' { }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
TRUE
'BitwiseOR First Set' { } U 'BitwiseAND First Set' { } => 'BitwiseOR First Set' { }
'BitwiseOR First Set' { }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
TRUE
'BitwiseAND First Set' { } U 'BitwiseXOR First Set' { } => 'BitwiseAND First Set' { }
'BitwiseAND First Set' { }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
TRUE
'BitwiseXOR First Set' { } U 'AddExpr First Set' { } => 'BitwiseXOR First Set' { }
'BitwiseXOR First Set' { }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #5  DONE!
###### First Set Iteration #5
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { } => 'RelOperation First Set' { }
'RelOperation First Set' { }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
TRUE
'RelEquals First Set' { } U 'BitwiseOR First Set' { } => 'RelEquals First Set' { }
'RelEquals First Set' { }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
TRUE
'BitwiseOR First Set' { } U 'BitwiseAND First Set' { } => 'BitwiseOR First Set' { }
'BitwiseOR First Set' { }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
TRUE
'BitwiseAND First Set' { } U 'BitwiseXOR First Set' { } => 'BitwiseAND First Set' { }
'BitwiseAND First Set' { }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #6  DONE!
###### First Set Iteration #6
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { } => 'RelOperation First Set' { }
'RelOperation First Set' { }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
TRUE
'RelEquals First Set' { } U 'BitwiseOR First Set' { } => 'RelEquals First Set' { }
'RelEquals First Set' { }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
TRUE
'BitwiseOR First Set' { } U 'BitwiseAND First Set' { } => 'BitwiseOR First Set' { }
'BitwiseOR First Set' { }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseAND First Set' { } U 'BitwiseXOR First Set' { '-' } => 'BitwiseAND First Set' { '-' }
'BitwiseAND First Set' { '-' }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { '-' } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #7  DONE!
###### First Set Iteration #7
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { } => 'RelOperation First Set' { }
'RelOperation First Set' { }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
TRUE
'RelEquals First Set' { } U 'BitwiseOR First Set' { } => 'RelEquals First Set' { }
'RelEquals First Set' { }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseOR First Set' { } U 'BitwiseAND First Set' { '-' } => 'BitwiseOR First Set' { '-' }
'BitwiseOR First Set' { '-' }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseAND First Set' { '-' } U 'BitwiseXOR First Set' { '-' } => 'BitwiseAND First Set' { '-' }
'BitwiseAND First Set' { '-' }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { '-' } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #8  DONE!
###### First Set Iteration #8
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { } => 'RelOperation First Set' { }
'RelOperation First Set' { }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
			Compare 'ϵ' To '-'
TRUE
'RelEquals First Set' { } U 'BitwiseOR First Set' { '-' } => 'RelEquals First Set' { '-' }
'RelEquals First Set' { '-' }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseOR First Set' { '-' } U 'BitwiseAND First Set' { '-' } => 'BitwiseOR First Set' { '-' }
'BitwiseOR First Set' { '-' }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseAND First Set' { '-' } U 'BitwiseXOR First Set' { '-' } => 'BitwiseAND First Set' { '-' }
'BitwiseAND First Set' { '-' }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { '-' } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #9  DONE!
###### First Set Iteration #9
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { } => 'LogicalAND First Set' { }
'LogicalAND First Set' { }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
			Compare 'ϵ' To '-'
TRUE
'RelOperation First Set' { } U 'RelEquals First Set' { '-' } => 'RelOperation First Set' { '-' }
'RelOperation First Set' { '-' }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
			Compare 'ϵ' To '-'
TRUE
'RelEquals First Set' { '-' } U 'BitwiseOR First Set' { '-' } => 'RelEquals First Set' { '-' }
'RelEquals First Set' { '-' }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseOR First Set' { '-' } U 'BitwiseAND First Set' { '-' } => 'BitwiseOR First Set' { '-' }
'BitwiseOR First Set' { '-' }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseAND First Set' { '-' } U 'BitwiseXOR First Set' { '-' } => 'BitwiseAND First Set' { '-' }
'BitwiseAND First Set' { '-' }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { '-' } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #10  DONE!
###### First Set Iteration #10
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { } => 'ArithExpr First Set' { }
'ArithExpr First Set' { }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
			Compare 'ϵ' To '-'
TRUE
'LogicalAND First Set' { } U 'RelOperation First Set' { '-' } => 'LogicalAND First Set' { '-' }
'LogicalAND First Set' { '-' }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
			Compare 'ϵ' To '-'
TRUE
'RelOperation First Set' { '-' } U 'RelEquals First Set' { '-' } => 'RelOperation First Set' { '-' }
'RelOperation First Set' { '-' }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
			Compare 'ϵ' To '-'
TRUE
'RelEquals First Set' { '-' } U 'BitwiseOR First Set' { '-' } => 'RelEquals First Set' { '-' }
'RelEquals First Set' { '-' }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseOR First Set' { '-' } U 'BitwiseAND First Set' { '-' } => 'BitwiseOR First Set' { '-' }
'BitwiseOR First Set' { '-' }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseAND First Set' { '-' } U 'BitwiseXOR First Set' { '-' } => 'BitwiseAND First Set' { '-' }
'BitwiseAND First Set' { '-' }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { '-' } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #11  DONE!
###### First Set Iteration #11
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { } => 'Finish First Set' { }
'Finish First Set' { }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
			Compare 'ϵ' To '-'
TRUE
'ArithExpr First Set' { } U 'LogicalAND First Set' { '-' } => 'ArithExpr First Set' { '-' }
'ArithExpr First Set' { '-' }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
			Compare 'ϵ' To '-'
TRUE
'LogicalAND First Set' { '-' } U 'RelOperation First Set' { '-' } => 'LogicalAND First Set' { '-' }
'LogicalAND First Set' { '-' }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
			Compare 'ϵ' To '-'
TRUE
'RelOperation First Set' { '-' } U 'RelEquals First Set' { '-' } => 'RelOperation First Set' { '-' }
'RelOperation First Set' { '-' }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
			Compare 'ϵ' To '-'
TRUE
'RelEquals First Set' { '-' } U 'BitwiseOR First Set' { '-' } => 'RelEquals First Set' { '-' }
'RelEquals First Set' { '-' }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseOR First Set' { '-' } U 'BitwiseAND First Set' { '-' } => 'BitwiseOR First Set' { '-' }
'BitwiseOR First Set' { '-' }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseAND First Set' { '-' } U 'BitwiseXOR First Set' { '-' } => 'BitwiseAND First Set' { '-' }
'BitwiseAND First Set' { '-' }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { '-' } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #12  DONE!
###### First Set Iteration #12
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'Finish First Set' { } U 'ArithExpr First Set' { '-' } => 'Finish First Set' { '-' }
'Finish First Set' { '-' }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
			Compare 'ϵ' To '-'
TRUE
'ArithExpr First Set' { '-' } U 'LogicalAND First Set' { '-' } => 'ArithExpr First Set' { '-' }
'ArithExpr First Set' { '-' }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
			Compare 'ϵ' To '-'
TRUE
'LogicalAND First Set' { '-' } U 'RelOperation First Set' { '-' } => 'LogicalAND First Set' { '-' }
'LogicalAND First Set' { '-' }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
			Compare 'ϵ' To '-'
TRUE
'RelOperation First Set' { '-' } U 'RelEquals First Set' { '-' } => 'RelOperation First Set' { '-' }
'RelOperation First Set' { '-' }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
			Compare 'ϵ' To '-'
TRUE
'RelEquals First Set' { '-' } U 'BitwiseOR First Set' { '-' } => 'RelEquals First Set' { '-' }
'RelEquals First Set' { '-' }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseOR First Set' { '-' } U 'BitwiseAND First Set' { '-' } => 'BitwiseOR First Set' { '-' }
'BitwiseOR First Set' { '-' }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseAND First Set' { '-' } U 'BitwiseXOR First Set' { '-' } => 'BitwiseAND First Set' { '-' }
'BitwiseAND First Set' { '-' }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { '-' } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #13  DONE!
###### First Set Iteration #13
----------------------
FIRST(Action65)
Action65	->  Program
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Program)
Program	->  MODULE  Module
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'MODULE First Set' { 'MODULE' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

Program	->  Module
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module)
Module	->  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(Module_1)
Module_1	->  MODULE  SysDecls  Routine  Module_1
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'Module_1 First Set' { 'MODULE','ϵ' } U 'MODULE First Set' { 'MODULE' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

Module_1	->  ϵ
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Module_1 First Set' { 'MODULE','ϵ' }
'Module_1 First Set' { 'MODULE','ϵ' }

----------------------
FIRST(Routine)
Routine	->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'PROC First Set' { 'PROC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'FUNC First Set' { 'FUNC' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

Routine	->  ϵ
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Routine First Set' { 'PROC','FUNC','ϵ' }
'Routine First Set' { 'PROC','FUNC','ϵ' }

----------------------
FIRST(ProcBody)
ProcBody	->  SysDecls  ProcBody_1
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(ProcBody_1)
ProcBody_1	->  Statements
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'ProcBody_1 First Set' { } U 'Statements First Set' { } => 'ProcBody_1 First Set' { }
'ProcBody_1 First Set' { }

----------------------
FIRST(ProcDecl)
ProcDecl	->  Ident  ProcInit  (  VarDecls  )  ProcInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U '= First Set' { '=' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

ProcDecl	->  ϵ
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }
'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

----------------------
FIRST(Address)
Address	->  CompConst
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Address First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'Address First Set' { '*','IDENT','NUMBER' }
'Address First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(OptReturnData)
OptReturnData	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'OptReturnData First Set' { '(','ϵ' } U '( First Set' { '(' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

OptReturnData	->  ϵ
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptReturnData First Set' { '(','ϵ' }
'OptReturnData First Set' { '(','ϵ' }

----------------------
FIRST(ASSIGNstmt)
ASSIGNstmt	->  =  ArithExpr
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '= First Set' { '=' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==+  ArithExpr
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==+ First Set' { '==+' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==-  ArithExpr
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==- First Set' { '==-' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==*  ArithExpr
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==* First Set' { '==*' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==/  ArithExpr
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==/ First Set' { '==/' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==MOD  ArithExpr
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==MOD First Set' { '==MOD' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==&  ArithExpr
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==& First Set' { '==&' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==!  ArithExpr
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==! First Set' { '==!' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==XOR  ArithExpr
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==XOR First Set' { '==XOR' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==%  ArithExpr
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==% First Set' { '==%' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==LSH  ArithExpr
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==LSH First Set' { '==LSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ==RSH  ArithExpr
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U '==RSH First Set' { '==RSH' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

ASSIGNstmt	->  ϵ
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

----------------------
FIRST(ELSEIFlist_1)
ELSEIFlist_1	->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ELSEIF First Set' { 'ELSEIF' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

ELSEIFlist_1	->  ϵ
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }
'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

----------------------
FIRST(ELSEstmt)
ELSEstmt	->  ELSE  Statements
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ELSE First Set' { 'ELSE' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

ELSEstmt	->  ϵ
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ELSEstmt First Set' { 'ELSE','ϵ' }
'ELSEstmt First Set' { 'ELSE','ϵ' }

----------------------
FIRST(Finish)
Finish	->  ArithExpr
Is 'ϵ' Not Contained in 'ArithExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'Finish First Set' { '-' } U 'ArithExpr First Set' { '-' } => 'Finish First Set' { '-' }
'Finish First Set' { '-' }

----------------------
FIRST(STEPoption)
STEPoption	->  STEP  ArithExpr
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'STEPoption First Set' { 'STEP','ϵ' } U 'STEP First Set' { 'STEP' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

STEPoption	->  ϵ
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'STEPoption First Set' { 'STEP','ϵ' }
'STEPoption First Set' { 'STEP','ϵ' }

----------------------
FIRST(CodeBlock)
CodeBlock	->  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CodeBlock First Set' { '*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'CodeBlock First Set' { '*','IDENT','NUMBER' }
'CodeBlock First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CodeBlock_1)
CodeBlock_1	->  ,  CompConst  CodeBlock_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'CodeBlock_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

CodeBlock_1	->  ϵ
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CodeBlock_1 First Set' { ',','ϵ' }
'CodeBlock_1 First Set' { ',','ϵ' }

----------------------
FIRST(ArithExpr)
ArithExpr	->  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'LogicalAND First Set'
			Compare 'ϵ' To '-'
TRUE
'ArithExpr First Set' { '-' } U 'LogicalAND First Set' { '-' } => 'ArithExpr First Set' { '-' }
'ArithExpr First Set' { '-' }

----------------------
FIRST(LogicalOR_1)
LogicalOR_1	->  OR  LogicalAND  LogicalOR_1
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'OR First Set' { 'OR' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

LogicalOR_1	->  ϵ
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalOR_1 First Set' { 'OR','ϵ' }
'LogicalOR_1 First Set' { 'OR','ϵ' }

----------------------
FIRST(LogicalAND)
LogicalAND	->  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'RelOperation First Set'
			Compare 'ϵ' To '-'
TRUE
'LogicalAND First Set' { '-' } U 'RelOperation First Set' { '-' } => 'LogicalAND First Set' { '-' }
'LogicalAND First Set' { '-' }

----------------------
FIRST(LogicalAND_1)
LogicalAND_1	->  AND  RelOperation  LogicalAND_1
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'AND First Set' { 'AND' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

LogicalAND_1	->  ϵ
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'LogicalAND_1 First Set' { 'AND','ϵ' }
'LogicalAND_1 First Set' { 'AND','ϵ' }

----------------------
FIRST(RelOperation)
RelOperation	->  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'RelEquals First Set'
			Compare 'ϵ' To '-'
TRUE
'RelOperation First Set' { '-' } U 'RelEquals First Set' { '-' } => 'RelOperation First Set' { '-' }
'RelOperation First Set' { '-' }

----------------------
FIRST(RelOperation_1)
RelOperation_1	->  >  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '> First Set' { '>' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  <  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U '< First Set' { '<' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  GTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'GTEQ First Set' { 'GTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  LTEQ  RelEquals  RelOperation_1
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'LTEQ First Set' { 'LTEQ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

RelOperation_1	->  ϵ
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }
'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

----------------------
FIRST(RelEquals)
RelEquals	->  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
			Compare 'ϵ' To '-'
TRUE
'RelEquals First Set' { '-' } U 'BitwiseOR First Set' { '-' } => 'RelEquals First Set' { '-' }
'RelEquals First Set' { '-' }

----------------------
FIRST(RelEquals_1)
RelEquals_1	->  =  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '= First Set' { '=' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  #  BitwiseOR  RelEquals_1
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'RelEquals_1 First Set' { '=','#','ϵ' } U '# First Set' { '#' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

RelEquals_1	->  ϵ
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'RelEquals_1 First Set' { '=','#','ϵ' }
'RelEquals_1 First Set' { '=','#','ϵ' }

----------------------
FIRST(BitwiseOR)
BitwiseOR	->  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseOR First Set' { '-' } U 'BitwiseAND First Set' { '-' } => 'BitwiseOR First Set' { '-' }
'BitwiseOR First Set' { '-' }

----------------------
FIRST(BitwiseOR_1)
BitwiseOR_1	->  %  BitwiseAND  BitwiseOR_1
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'BitwiseOR_1 First Set' { '%','ϵ' } U '% First Set' { '%' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

BitwiseOR_1	->  ϵ
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseOR_1 First Set' { '%','ϵ' }
'BitwiseOR_1 First Set' { '%','ϵ' }

----------------------
FIRST(BitwiseAND)
BitwiseAND	->  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseAND First Set' { '-' } U 'BitwiseXOR First Set' { '-' } => 'BitwiseAND First Set' { '-' }
'BitwiseAND First Set' { '-' }

----------------------
FIRST(BitwiseAND_1)
BitwiseAND_1	->  &  BitwiseXOR  BitwiseAND_1
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'BitwiseAND_1 First Set' { '&','ϵ' } U '& First Set' { '&' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

BitwiseAND_1	->  ϵ
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BitwiseAND_1 First Set' { '&','ϵ' }
'BitwiseAND_1 First Set' { '&','ϵ' }

----------------------
FIRST(BitwiseXOR)
BitwiseXOR	->  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'BitwiseXOR First Set' { '-' } U 'AddExpr First Set' { '-' } => 'BitwiseXOR First Set' { '-' }
'BitwiseXOR First Set' { '-' }

----------------------
FIRST(SimpleRelExpr_1)
SimpleRelExpr_1	->  !  AddExpr  SimpleRelExpr_1
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'SimpleRelExpr_1 First Set' { '!','ϵ' } U '! First Set' { '!' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

SimpleRelExpr_1	->  ϵ
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SimpleRelExpr_1 First Set' { '!','ϵ' }
'SimpleRelExpr_1 First Set' { '!','ϵ' }

----------------------
FIRST(AddExpr)
AddExpr	->  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr First Set' { '-' } U 'ShifExpr First Set' { '-' } => 'AddExpr First Set' { '-' }
'AddExpr First Set' { '-' }

----------------------
FIRST(AddExpr_1)
AddExpr_1	->  +  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  -  ShifExpr  AddExpr_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'AddExpr_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

AddExpr_1	->  ϵ
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'AddExpr_1 First Set' { '+','-','ϵ' }
'AddExpr_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(ShifExpr)
ShifExpr	->  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'ShifExpr First Set' { '-' } U 'MultExpr First Set' { '-' } => 'ShifExpr First Set' { '-' }
'ShifExpr First Set' { '-' }

----------------------
FIRST(ShiftExpr_1)
ShiftExpr_1	->  LSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'LSH First Set' { 'LSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  RSH  MultExpr  ShiftExpr_1
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'RSH First Set' { 'RSH' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

ShiftExpr_1	->  ϵ
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }
'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

----------------------
FIRST(MultExpr)
MultExpr	->  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'MultExpr First Set' { '-' } U 'Unary First Set' { '-' } => 'MultExpr First Set' { '-' }
'MultExpr First Set' { '-' }

----------------------
FIRST(MultExpr_1)
MultExpr_1	->  *  Unary  MultExpr_1
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '* First Set' { '*' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  /  Unary  MultExpr_1
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U '/ First Set' { '/' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  MOD  Unary  MultExpr_1
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'MOD First Set' { 'MOD' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

MultExpr_1	->  ϵ
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MultExpr_1 First Set' { '*','/','MOD','ϵ' }
'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

----------------------
FIRST(Unary)
Unary	->  -  Unary
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'Unary First Set' { '-' } U '- First Set' { '-' } => 'Unary First Set' { '-' }
'Unary First Set' { '-' }

Unary	->  Factor
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary First Set' { '-' }

----------------------
FIRST(Factor)
Factor	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'Number First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  FUNCcall
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'FUNCcall First Set' { } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U '( First Set' { '(' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

Factor	->  MemContents
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }
'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

----------------------
FIRST(CompConst)
CompConst	->  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'CompConst First Set' { '*','IDENT','NUMBER' } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'CompConst First Set' { '*','IDENT','NUMBER' }
'CompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(CompConst_1)
CompConst_1	->  +  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '+ First Set' { '+' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  -  BaseCompConst  CompConst_1
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'CompConst_1 First Set' { '+','-','ϵ' } U '- First Set' { '-' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

CompConst_1	->  ϵ
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'CompConst_1 First Set' { '+','-','ϵ' }
'CompConst_1 First Set' { '+','-','ϵ' }

----------------------
FIRST(BaseCompConst)
BaseCompConst	->  Ident
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  Number
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'Number First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  PtrRef
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U 'PtrRef First Set' { } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

BaseCompConst	->  *
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'BaseCompConst First Set' { '*','IDENT','NUMBER' } U '* First Set' { '*' } => 'BaseCompConst First Set' { '*','IDENT','NUMBER' }
'BaseCompConst First Set' { '*','IDENT','NUMBER' }

----------------------
FIRST(FundType)
FundType	->  BOOL
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CHAR  OptModifier
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CHAR First Set' { 'CHAR' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  BYTE  OptModifier
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'BYTE First Set' { 'BYTE' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  INT  OptModifier
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'INT First Set' { 'INT' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

FundType	->  CARD  OptModifier
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' } U 'CARD First Set' { 'CARD' } => 'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }
'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

----------------------
FIRST(OptModifier)
OptModifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'OptModifier First Set' { 'POINTER','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

OptModifier	->  ϵ
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptModifier First Set' { 'POINTER','ϵ' }
'OptModifier First Set' { 'POINTER','ϵ' }

----------------------
FIRST(VarDecls)
VarDecls	->  RECORDTYPE  RecIdentLst
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CHAR  CharDecl
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BYTE  ByteDecl
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  INT  IntDecl
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  CARD  CardDecl
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  BOOL  BOOLDecl
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

VarDecls	->  ϵ
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(SysDecls)
SysDecls	->  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

----------------------
FIRST(SysDecls_1)
SysDecls_1	->  ;  SysDecl  SysDecls_1
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'SysDecls_1 First Set' { ';','ϵ' } U '; First Set' { ';' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

SysDecls_1	->  ϵ
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecls_1 First Set' { ';','ϵ' }
'SysDecls_1 First Set' { ';','ϵ' }

----------------------
FIRST(SysDecl)
SysDecl	->  DEFINE  DefList
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'DEFINE First Set' { 'DEFINE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  TYPE  RecIdentList
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'TYPE First Set' { 'TYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  RECORDTYPE  Modifier  VarList
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CHAR  Modifier  VarList
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CHAR First Set' { 'CHAR' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BYTE  Modifier  VarList
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BYTE First Set' { 'BYTE' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  INT  Modifier  VarList
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'INT First Set' { 'INT' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  CARD  Modifier  VarList
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'CARD First Set' { 'CARD' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  BOOL  VarList
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'BOOL First Set' { 'BOOL' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

SysDecl	->  ϵ
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

----------------------
FIRST(DefList)
DefList	->  Def  DefList_1
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'DefList First Set' { 'IDENT','NUMBER' } U 'Def First Set' { 'IDENT','NUMBER' } => 'DefList First Set' { 'IDENT','NUMBER' }
'DefList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(DefList_1)
DefList_1	->  ,  Def  DefList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'DefList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

DefList_1	->  ϵ
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'DefList_1 First Set' { ',','ϵ' }
'DefList_1 First Set' { ',','ϵ' }

----------------------
FIRST(Def)
Def	->  Ident  =  Constant
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Def First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'Def First Set' { 'IDENT','NUMBER' }
'Def First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdentList)
RecIdentList	->  RecIdent  RecIdentList
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(RecIdent)
RecIdent	->  Ident  =  [  FieldInit  ]
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  ϵ
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

RecIdent	->  Ident  OptRecInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }
'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

----------------------
FIRST(RecIdentLst)
RecIdentLst	->  RecIdent  RecIdentLst_1  RecIdentLst_1
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ,  RecIdent  RecIdentLst_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U ', First Set' { ',' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

RecIdentLst	->  ϵ
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }
'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

----------------------
FIRST(OptRecInit)
OptRecInit	->  =  Address
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptRecInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

OptRecInit	->  ϵ
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptRecInit First Set' { '=','ϵ' }
'OptRecInit First Set' { '=','ϵ' }

----------------------
FIRST(BOOLDecl)
BOOLDecl	->  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'BOOLDecl First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'BOOLDecl First Set' { 'IDENT','NUMBER' }
'BOOLDecl First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(BOOLDecl_1)
BOOLDecl_1	->  ,  Ident  OptInit  BOOLDecl_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'BOOLDecl_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

BOOLDecl_1	->  ϵ
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'BOOLDecl_1 First Set' { ',','ϵ' }
'BOOLDecl_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarList)
VarList	->  VarName  VarList_1
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarList First Set' { 'IDENT','NUMBER' } U 'VarName First Set' { 'IDENT','NUMBER' } => 'VarList First Set' { 'IDENT','NUMBER' }
'VarList First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(VarList_1)
VarList_1	->  ,  VarName  VarList_1
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'VarList_1 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

VarList_1	->  ϵ
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'VarList_1 First Set' { ',','ϵ' }
'VarList_1 First Set' { ',','ϵ' }

----------------------
FIRST(VarName)
VarName	->  Ident  OptInit
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'VarName First Set' { 'IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'VarName First Set' { 'IDENT','NUMBER' }
'VarName First Set' { 'IDENT','NUMBER' }

----------------------
FIRST(OptInit)
OptInit	->  =  CompConst
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

OptInit	->  ϵ
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptInit First Set' { '=','ϵ' }
'OptInit First Set' { '=','ϵ' }

----------------------
FIRST(Modifier)
Modifier	->  POINTER
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'POINTER First Set' { 'POINTER' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ARRAY  ArrayStuff
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ARRAY First Set' { 'ARRAY' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

Modifier	->  ϵ
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'Modifier First Set' { 'POINTER','ARRAY','ϵ' }
'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

----------------------
FIRST(ArrayStuff)
ArrayStuff	->  (  CompConst  )  OptArrayInit
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'ArrayStuff First Set' { '(','ϵ' } U '( First Set' { '(' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

ArrayStuff	->  ϵ
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'ArrayStuff First Set' { '(','ϵ' }
'ArrayStuff First Set' { '(','ϵ' }

----------------------
FIRST(OptArrayInit)
OptArrayInit	->  =  OptArrayInit_1
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'OptArrayInit First Set' { '=','ϵ' } U '= First Set' { '=' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

OptArrayInit	->  ϵ
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit First Set' { '=','ϵ' }
'OptArrayInit First Set' { '=','ϵ' }

----------------------
FIRST(OptArrayInit_1)
OptArrayInit_1	->  [  OptArrayInit_2  ]  OptArrayInit_2
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U '[ First Set' { '[' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

OptArrayInit_1	->  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }
'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

----------------------
FIRST(OptArrayInit_3)
OptArrayInit_3	->  ,  CompConst  OptArrayInit_3
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'OptArrayInit_3 First Set' { ',','ϵ' } U ', First Set' { ',' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

OptArrayInit_3	->  ϵ
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'OptArrayInit_3 First Set' { ',','ϵ' }
'OptArrayInit_3 First Set' { ',','ϵ' }

----------------------
FIRST(MemContents)
MemContents	->  Ident  MemContentsType
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

MemContents	->  @  Ident
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'MemContents First Set' { '@','IDENT','NUMBER' } U '@ First Set' { '@' } => 'MemContents First Set' { '@','IDENT','NUMBER' }
'MemContents First Set' { '@','IDENT','NUMBER' }

----------------------
FIRST(MemContentsType)
MemContentsType	->  (  ArithExpr  )
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '( First Set' { '(' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ^
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '^ First Set' { '^' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  .  Ident
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'MemContentsType First Set' { '(','^','.','ϵ' } U '. First Set' { '.' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

MemContentsType	->  ϵ
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'MemContentsType First Set' { '(','^','.','ϵ' }
'MemContentsType First Set' { '(','^','.','ϵ' }

----------------------
FIRST(Ident)
Ident	->  IDENT  Number
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'IDENT First Set' { 'IDENT' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

Ident	->  NUMBER
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'Ident First Set' { 'IDENT','NUMBER' } U 'NUMBER First Set' { 'NUMBER' } => 'Ident First Set' { 'IDENT','NUMBER' }
'Ident First Set' { 'IDENT','NUMBER' }

###### Iteration #14  DONE!
'PtrRef First Set' { }

'ArithExpr First Set' { '-' }

'Start First Set' { }

'RelOperation First Set' { '-' }

'Factor First Set' { 'ϵ','(','@','IDENT','NUMBER' }

'AddExpr_1 First Set' { '+','-','ϵ' }

'FUNCcall First Set' { }

'PROCcall First Set' { }

'ProcCall First Set' { }

'FuncCall First Set' { }

'DOloop First Set' { }

'MultExpr_1 First Set' { '*','/','MOD','ϵ' }

'ELSEIFlist_1 First Set' { 'ELSEIF','ϵ' }

'SysDecls First Set' { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

'Module_1 First Set' { 'MODULE','ϵ' }

'BitwiseOR_1 First Set' { '%','ϵ' }

'MultExpr First Set' { '-' }

'LogicalAND_1 First Set' { 'AND','ϵ' }

'DoLoop First Set' { }

'FORloop First Set' { }

'OptModifier First Set' { 'POINTER','ϵ' }

'RecIdentLst First Set' { ',','ϵ','IDENT','NUMBER' }

'Unary First Set' { '-' }

'Routine First Set' { 'PROC','FUNC','ϵ' }

'ProcInit First Set' { }

'WhileLoop First Set' { }

'ELSEIFlist First Set' { }

'CondExpr First Set' { }

'CardDecl First Set' { }

'RecIdent First Set' { 'ϵ','IDENT','NUMBER' }

'Def First Set' { 'IDENT','NUMBER' }

'ProcBody_1 First Set' { }

'BitwiseAND First Set' { '-' }

'ShifExpr First Set' { '-' }

'AddExpr First Set' { '-' }

'BOOLDecl First Set' { 'IDENT','NUMBER' }

'OptArrayInit_1 First Set' { '[','*','IDENT','NUMBER' }

'Ident First Set' { 'IDENT','NUMBER' }

'ASSIGNstmt First Set' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }

'OptArrayInit_2 First Set' { }

'ForStmt First Set' { }

'OptArrayInit_3 First Set' { ',','ϵ' }

'FieldInit First Set' { }

'BOOLDecl_1 First Set' { ',','ϵ' }

'RecordDecl First Set' { }

'VarDecls First Set' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

'STEPoption First Set' { 'STEP','ϵ' }

'Finish First Set' { '-' }

'Address First Set' { '*','IDENT','NUMBER' }

'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

'ElseIf First Set' { }

'ELSEstmt First Set' { 'ELSE','ϵ' }

'RelEquals First Set' { '-' }

'SysDecl First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }

'DefList First Set' { 'IDENT','NUMBER' }

'RecIdentList First Set' { 'IDENT','NUMBER' }

'ProcDecl First Set' { '=','ϵ','IDENT','NUMBER' }

'WHILEloop First Set' { }

'BaseCompConst First Set' { '*','IDENT','NUMBER' }

'Modifier First Set' { 'POINTER','ARRAY','ϵ' }

'Constant First Set' { }

'ShiftExpr_1 First Set' { 'LSH','RSH','ϵ' }

'ArrayStuff First Set' { '(','ϵ' }

'RelEquals_1 First Set' { '=','#','ϵ' }

'SimpleRelExpr_1 First Set' { '!','ϵ' }

'RecIdentList_1 First Set' { }

'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

'ByteDecl First Set' { }

'VarList_1 First Set' { ',','ϵ' }

'Identifier First Set' { }

'Action65 First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

'LogicalOR_1 First Set' { 'OR','ϵ' }

'VarList First Set' { 'IDENT','NUMBER' }

'OptInit First Set' { '=','ϵ' }

'CodeBlock_1 First Set' { ',','ϵ' }

'CompConst_1 First Set' { '+','-','ϵ' }

'SysDecls_1 First Set' { ';','ϵ' }

'BitwiseAND_1 First Set' { '&','ϵ' }

'MemContents First Set' { '@','IDENT','NUMBER' }

'CodeBlock First Set' { '*','IDENT','NUMBER' }

'LogicalAND First Set' { '-' }

'OptArrayInit First Set' { '=','ϵ' }

'UNTILLstmt First Set' { }

'OptRecInit First Set' { '=','ϵ' }

'OptReturnData First Set' { '(','ϵ' }

'RelOperation_1 First Set' { '>','<','GTEQ','LTEQ','ϵ' }

'FundType First Set' { 'BOOL','CHAR','BYTE','INT','CARD' }

'Number First Set' { }

'CompConst First Set' { '*','IDENT','NUMBER' }

'MemContentsType First Set' { '(','^','.','ϵ' }

'BitwiseOR First Set' { '-' }

'BitwiseXOR First Set' { '-' }

'DefList_1 First Set' { ',','ϵ' }

'VarName First Set' { 'IDENT','NUMBER' }

'Statements First Set' { }

'RecIdentLst_1 First Set' { }

'ProcBody First Set' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }

'IFstmt First Set' { }

'CharDecl First Set' { }

'IfStmt First Set' { }

'IntDecl First Set' { }


----- Calc Follow Sets------
######### Follow Set Itteration #1
------------Looking For Action65 ---------------
------------Looking For Program ---------------
Rule 3:Action65->  Program
'Program Follow Set' { } U 'Action65 Follow Set' { '$' } => 'Program Follow Set' { '$' }
------------Looking For Module ---------------
Rule 3:Program->  Module
'Module Follow Set' { } U 'Program Follow Set' { '$' } => 'Module Follow Set' { '$' }
------------Looking For Module_1 ---------------
------------Looking For Routine ---------------
	Module->  SysDecls  Routine  Module_1
Is ϵ in Set Module_1 First Set
TRUE
Rule 2 3 4:Module->  SysDecls  Routine  Module_1
'Module_1 Follow Set' { } U 'Module Follow Set' { '$' } => 'Module_1 Follow Set' { '$' }
'Routine Follow Set' { 'MODULE' } U 'Module Follow Set' { '$' } => 'Routine Follow Set' { 'MODULE','$' }
	Module_1->  MODULE  SysDecls  Routine  Module_1
Is ϵ in Set Module_1 First Set
TRUE
Rule 2 3 4:Module_1->  MODULE  SysDecls  Routine  Module_1
'Module_1 Follow Set' { '$' } U 'Module_1 Follow Set' { '$' } => 'Module_1 Follow Set' { '$' }
'Routine Follow Set' { 'MODULE','$' } U 'Module_1 Follow Set' { '$' } => 'Routine Follow Set' { 'MODULE','$' }
------------Looking For ProcBody ---------------
------------Looking For ProcBody_1 ---------------
------------Looking For ProcDecl ---------------
------------Looking For Address ---------------
------------Looking For OptReturnData ---------------
------------Looking For ASSIGNstmt ---------------
------------Looking For ELSEIFlist_1 ---------------
------------Looking For ELSEstmt ---------------
------------Looking For Finish ---------------
------------Looking For STEPoption ---------------
------------Looking For CodeBlock ---------------
------------Looking For CodeBlock_1 ---------------
------------Looking For ArithExpr ---------------
	OptReturnData->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:OptReturnData->  (  ArithExpr  )
') Follow Set' { } U 'OptReturnData Follow Set' { } => ') Follow Set' { }
Rule 3:Finish->  ArithExpr
'ArithExpr Follow Set' { ')' } U 'Finish Follow Set' { } => 'ArithExpr Follow Set' { ')' }
	Factor->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:Factor->  (  ArithExpr  )
') Follow Set' { } U 'Factor Follow Set' { } => ') Follow Set' { }
	MemContentsType->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:MemContentsType->  (  ArithExpr  )
') Follow Set' { } U 'MemContentsType Follow Set' { } => ') Follow Set' { }
------------Looking For LogicalOR_1 ---------------
------------Looking For LogicalAND ---------------
	ArithExpr->  LogicalAND  LogicalOR_1
Is ϵ in Set LogicalOR_1 First Set
TRUE
Rule 2 3 4:ArithExpr->  LogicalAND  LogicalOR_1
'LogicalOR_1 Follow Set' { } U 'ArithExpr Follow Set' { ')' } => 'LogicalOR_1 Follow Set' { ')' }
'LogicalAND Follow Set' { 'OR' } U 'ArithExpr Follow Set' { ')' } => 'LogicalAND Follow Set' { 'OR',')' }
	LogicalOR_1->  OR  LogicalAND  LogicalOR_1
Is ϵ in Set LogicalOR_1 First Set
TRUE
Rule 2 3 4:LogicalOR_1->  OR  LogicalAND  LogicalOR_1
'LogicalOR_1 Follow Set' { ')' } U 'LogicalOR_1 Follow Set' { ')' } => 'LogicalOR_1 Follow Set' { ')' }
'LogicalAND Follow Set' { 'OR',')' } U 'LogicalOR_1 Follow Set' { ')' } => 'LogicalAND Follow Set' { 'OR',')' }
------------Looking For LogicalAND_1 ---------------
------------Looking For RelOperation ---------------
	LogicalAND->  RelOperation  LogicalAND_1
Is ϵ in Set LogicalAND_1 First Set
TRUE
Rule 2 3 4:LogicalAND->  RelOperation  LogicalAND_1
'LogicalAND_1 Follow Set' { } U 'LogicalAND Follow Set' { 'OR',')' } => 'LogicalAND_1 Follow Set' { 'OR',')' }
'RelOperation Follow Set' { 'AND' } U 'LogicalAND Follow Set' { 'OR',')' } => 'RelOperation Follow Set' { 'AND','OR',')' }
	LogicalAND_1->  AND  RelOperation  LogicalAND_1
Is ϵ in Set LogicalAND_1 First Set
TRUE
Rule 2 3 4:LogicalAND_1->  AND  RelOperation  LogicalAND_1
'LogicalAND_1 Follow Set' { 'OR',')' } U 'LogicalAND_1 Follow Set' { 'OR',')' } => 'LogicalAND_1 Follow Set' { 'OR',')' }
'RelOperation Follow Set' { 'AND','OR',')' } U 'LogicalAND_1 Follow Set' { 'OR',')' } => 'RelOperation Follow Set' { 'AND','OR',')' }
------------Looking For RelOperation_1 ---------------
------------Looking For RelEquals ---------------
	RelOperation->  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation->  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { } U 'RelOperation Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ' } U 'RelOperation Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  >  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  >  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  <  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  <  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  GTEQ  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  GTEQ  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  LTEQ  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  LTEQ  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For RelEquals_1 ---------------
------------Looking For BitwiseOR ---------------
	RelEquals->  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals->  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { } U 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#' } U 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	RelEquals_1->  =  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals_1->  =  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	RelEquals_1->  #  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals_1->  #  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For BitwiseOR_1 ---------------
------------Looking For BitwiseAND ---------------
	BitwiseOR->  BitwiseAND  BitwiseOR_1
Is ϵ in Set BitwiseOR_1 First Set
TRUE
Rule 2 3 4:BitwiseOR->  BitwiseAND  BitwiseOR_1
'BitwiseOR_1 Follow Set' { } U 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseAND Follow Set' { '%' } U 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1
Is ϵ in Set BitwiseOR_1 First Set
TRUE
Rule 2 3 4:BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1
'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For BitwiseAND_1 ---------------
------------Looking For BitwiseXOR ---------------
	BitwiseAND->  BitwiseXOR  BitwiseAND_1
Is ϵ in Set BitwiseAND_1 First Set
TRUE
Rule 2 3 4:BitwiseAND->  BitwiseXOR  BitwiseAND_1
'BitwiseAND_1 Follow Set' { } U 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseXOR Follow Set' { '&' } U 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1
Is ϵ in Set BitwiseAND_1 First Set
TRUE
Rule 2 3 4:BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1
'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For SimpleRelExpr_1 ---------------
------------Looking For AddExpr ---------------
	BitwiseXOR->  AddExpr  SimpleRelExpr_1
Is ϵ in Set SimpleRelExpr_1 First Set
TRUE
Rule 2 3 4:BitwiseXOR->  AddExpr  SimpleRelExpr_1
'SimpleRelExpr_1 Follow Set' { } U 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'AddExpr Follow Set' { '!' } U 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1
Is ϵ in Set SimpleRelExpr_1 First Set
TRUE
Rule 2 3 4:SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1
'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For AddExpr_1 ---------------
------------Looking For ShifExpr ---------------
	AddExpr->  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr->  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { } U 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-' } U 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	AddExpr_1->  +  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr_1->  +  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	AddExpr_1->  -  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr_1->  -  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For ShiftExpr_1 ---------------
------------Looking For MultExpr ---------------
	ShifExpr->  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShifExpr->  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { } U 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH' } U 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For MultExpr_1 ---------------
------------Looking For Unary ---------------
	MultExpr->  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr->  Unary  MultExpr_1
'MultExpr_1 Follow Set' { } U 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD' } U 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  *  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  *  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  /  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  /  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  MOD  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  MOD  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For Factor ---------------
Rule 3:Unary->  Factor
'Factor Follow Set' { } U 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For CompConst ---------------
Rule 3:Address->  CompConst
'CompConst Follow Set' { } U 'Address Follow Set' { } => 'CompConst Follow Set' { }
	CodeBlock->  CompConst  CodeBlock_1
Is ϵ in Set CodeBlock_1 First Set
TRUE
Rule 2 3 4:CodeBlock->  CompConst  CodeBlock_1
'CodeBlock_1 Follow Set' { } U 'CodeBlock Follow Set' { } => 'CodeBlock_1 Follow Set' { }
'CompConst Follow Set' { ',' } U 'CodeBlock Follow Set' { } => 'CompConst Follow Set' { ',' }
	CodeBlock_1->  ,  CompConst  CodeBlock_1
Is ϵ in Set CodeBlock_1 First Set
TRUE
Rule 2 3 4:CodeBlock_1->  ,  CompConst  CodeBlock_1
'CodeBlock_1 Follow Set' { } U 'CodeBlock_1 Follow Set' { } => 'CodeBlock_1 Follow Set' { }
'CompConst Follow Set' { ',' } U 'CodeBlock_1 Follow Set' { } => 'CompConst Follow Set' { ',' }
	OptArrayInit_1->  CompConst  OptArrayInit_3
Is ϵ in Set OptArrayInit_3 First Set
TRUE
Rule 2 3 4:OptArrayInit_1->  CompConst  OptArrayInit_3
'OptArrayInit_3 Follow Set' { } U 'OptArrayInit_1 Follow Set' { } => 'OptArrayInit_3 Follow Set' { }
'CompConst Follow Set' { ',' } U 'OptArrayInit_1 Follow Set' { } => 'CompConst Follow Set' { ',' }
	OptArrayInit_3->  ,  CompConst  OptArrayInit_3
Is ϵ in Set OptArrayInit_3 First Set
TRUE
Rule 2 3 4:OptArrayInit_3->  ,  CompConst  OptArrayInit_3
'OptArrayInit_3 Follow Set' { } U 'OptArrayInit_3 Follow Set' { } => 'OptArrayInit_3 Follow Set' { }
'CompConst Follow Set' { ',' } U 'OptArrayInit_3 Follow Set' { } => 'CompConst Follow Set' { ',' }
------------Looking For CompConst_1 ---------------
------------Looking For BaseCompConst ---------------
	CompConst->  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst->  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { } U 'CompConst Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-' } U 'CompConst Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
	CompConst_1->  +  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst_1->  +  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { ',' } U 'CompConst_1 Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-',',' } U 'CompConst_1 Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
	CompConst_1->  -  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst_1->  -  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { ',' } U 'CompConst_1 Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-',',' } U 'CompConst_1 Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
------------Looking For FundType ---------------
------------Looking For OptModifier ---------------
------------Looking For VarDecls ---------------
------------Looking For SysDecls ---------------
	ProcBody->  SysDecls  ProcBody_1
Is ϵ in Set ProcBody_1 First Set
FALSE
Rule 2 3:ProcBody->  SysDecls  ProcBody_1
'ProcBody_1 Follow Set' { } U 'ProcBody Follow Set' { } => 'ProcBody_1 Follow Set' { }
------------Looking For SysDecls_1 ---------------
------------Looking For SysDecl ---------------
	SysDecls->  SysDecl  SysDecls_1
Is ϵ in Set SysDecls_1 First Set
TRUE
Rule 2 3 4:SysDecls->  SysDecl  SysDecls_1
'SysDecls_1 Follow Set' { } U 'SysDecls Follow Set' { } => 'SysDecls_1 Follow Set' { }
'SysDecl Follow Set' { ';' } U 'SysDecls Follow Set' { } => 'SysDecl Follow Set' { ';' }
	SysDecls_1->  ;  SysDecl  SysDecls_1
Is ϵ in Set SysDecls_1 First Set
TRUE
Rule 2 3 4:SysDecls_1->  ;  SysDecl  SysDecls_1
'SysDecls_1 Follow Set' { } U 'SysDecls_1 Follow Set' { } => 'SysDecls_1 Follow Set' { }
'SysDecl Follow Set' { ';' } U 'SysDecls_1 Follow Set' { } => 'SysDecl Follow Set' { ';' }
------------Looking For DefList ---------------
------------Looking For DefList_1 ---------------
------------Looking For Def ---------------
	DefList->  Def  DefList_1
Is ϵ in Set DefList_1 First Set
TRUE
Rule 2 3 4:DefList->  Def  DefList_1
'DefList_1 Follow Set' { } U 'DefList Follow Set' { } => 'DefList_1 Follow Set' { }
'Def Follow Set' { ',' } U 'DefList Follow Set' { } => 'Def Follow Set' { ',' }
	DefList_1->  ,  Def  DefList_1
Is ϵ in Set DefList_1 First Set
TRUE
Rule 2 3 4:DefList_1->  ,  Def  DefList_1
'DefList_1 Follow Set' { } U 'DefList_1 Follow Set' { } => 'DefList_1 Follow Set' { }
'Def Follow Set' { ',' } U 'DefList_1 Follow Set' { } => 'Def Follow Set' { ',' }
------------Looking For RecIdentList ---------------
------------Looking For RecIdent ---------------
	RecIdentList->  RecIdent  RecIdentList
Is ϵ in Set RecIdentList First Set
FALSE
Rule 2 3:RecIdentList->  RecIdent  RecIdentList
'RecIdentList Follow Set' { } U 'RecIdentList Follow Set' { } => 'RecIdentList Follow Set' { }
	RecIdentLst->  ,  RecIdent  RecIdentLst_1
Is ϵ in Set RecIdentLst_1 First Set
FALSE
Rule 2 3:RecIdentLst->  ,  RecIdent  RecIdentLst_1
'RecIdentLst_1 Follow Set' { } U 'RecIdentLst Follow Set' { } => 'RecIdentLst_1 Follow Set' { }
------------Looking For RecIdentLst ---------------
------------Looking For OptRecInit ---------------
------------Looking For BOOLDecl ---------------
------------Looking For BOOLDecl_1 ---------------
------------Looking For VarList ---------------
------------Looking For VarList_1 ---------------
------------Looking For VarName ---------------
	VarList->  VarName  VarList_1
Is ϵ in Set VarList_1 First Set
TRUE
Rule 2 3 4:VarList->  VarName  VarList_1
'VarList_1 Follow Set' { } U 'VarList Follow Set' { } => 'VarList_1 Follow Set' { }
'VarName Follow Set' { ',' } U 'VarList Follow Set' { } => 'VarName Follow Set' { ',' }
	VarList_1->  ,  VarName  VarList_1
Is ϵ in Set VarList_1 First Set
TRUE
Rule 2 3 4:VarList_1->  ,  VarName  VarList_1
'VarList_1 Follow Set' { } U 'VarList_1 Follow Set' { } => 'VarList_1 Follow Set' { }
'VarName Follow Set' { ',' } U 'VarList_1 Follow Set' { } => 'VarName Follow Set' { ',' }
------------Looking For OptInit ---------------
	BOOLDecl->  Ident  OptInit  BOOLDecl_1
Is ϵ in Set BOOLDecl_1 First Set
TRUE
Rule 2 3 4:BOOLDecl->  Ident  OptInit  BOOLDecl_1
'BOOLDecl_1 Follow Set' { } U 'BOOLDecl Follow Set' { } => 'BOOLDecl_1 Follow Set' { }
'OptInit Follow Set' { ',' } U 'BOOLDecl Follow Set' { } => 'OptInit Follow Set' { ',' }
	BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1
Is ϵ in Set BOOLDecl_1 First Set
TRUE
Rule 2 3 4:BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1
'BOOLDecl_1 Follow Set' { } U 'BOOLDecl_1 Follow Set' { } => 'BOOLDecl_1 Follow Set' { }
'OptInit Follow Set' { ',' } U 'BOOLDecl_1 Follow Set' { } => 'OptInit Follow Set' { ',' }
------------Looking For Modifier ---------------
	SysDecl->  RECORDTYPE  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  RECORDTYPE  Modifier  VarList
'VarList Follow Set' { } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  CHAR  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  CHAR  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  BYTE  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  BYTE  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  INT  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  INT  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  CARD  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  CARD  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
------------Looking For ArrayStuff ---------------
------------Looking For OptArrayInit ---------------
------------Looking For OptArrayInit_1 ---------------
------------Looking For OptArrayInit_3 ---------------
------------Looking For MemContents ---------------
Rule 3:Factor->  MemContents
'MemContents Follow Set' { } U 'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For MemContentsType ---------------
------------Looking For Ident ---------------
Rule 3:BaseCompConst->  Ident
'Ident Follow Set' { } U 'BaseCompConst Follow Set' { '+','-',',' } => 'Ident Follow Set' { '+','-',',' }
	RecIdent->  Ident  OptRecInit
Is ϵ in Set OptRecInit First Set
TRUE
Rule 2 3 4:RecIdent->  Ident  OptRecInit
'OptRecInit Follow Set' { } U 'RecIdent Follow Set' { 'IDENT','NUMBER' } => 'OptRecInit Follow Set' { 'IDENT','NUMBER' }
'Ident Follow Set' { '+','-',',','=' } U 'RecIdent Follow Set' { 'IDENT','NUMBER' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER' }
	VarName->  Ident  OptInit
Is ϵ in Set OptInit First Set
TRUE
Rule 2 3 4:VarName->  Ident  OptInit
'OptInit Follow Set' { ',' } U 'VarName Follow Set' { ',' } => 'OptInit Follow Set' { ',' }
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER' } U 'VarName Follow Set' { ',' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER' }
	MemContents->  Ident  MemContentsType
Is ϵ in Set MemContentsType First Set
TRUE
Rule 2 3 4:MemContents->  Ident  MemContentsType
'MemContentsType Follow Set' { } U 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.' } U 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')' }
######### Follow Set Itteration #2
------------Looking For Action65 ---------------
------------Looking For Program ---------------
Rule 3:Action65->  Program
'Program Follow Set' { '$' } U 'Action65 Follow Set' { '$' } => 'Program Follow Set' { '$' }
------------Looking For Module ---------------
Rule 3:Program->  Module
'Module Follow Set' { '$' } U 'Program Follow Set' { '$' } => 'Module Follow Set' { '$' }
------------Looking For Module_1 ---------------
------------Looking For Routine ---------------
	Module->  SysDecls  Routine  Module_1
Is ϵ in Set Module_1 First Set
TRUE
Rule 2 3 4:Module->  SysDecls  Routine  Module_1
'Module_1 Follow Set' { '$' } U 'Module Follow Set' { '$' } => 'Module_1 Follow Set' { '$' }
'Routine Follow Set' { 'MODULE','$' } U 'Module Follow Set' { '$' } => 'Routine Follow Set' { 'MODULE','$' }
	Module_1->  MODULE  SysDecls  Routine  Module_1
Is ϵ in Set Module_1 First Set
TRUE
Rule 2 3 4:Module_1->  MODULE  SysDecls  Routine  Module_1
'Module_1 Follow Set' { '$' } U 'Module_1 Follow Set' { '$' } => 'Module_1 Follow Set' { '$' }
'Routine Follow Set' { 'MODULE','$' } U 'Module_1 Follow Set' { '$' } => 'Routine Follow Set' { 'MODULE','$' }
------------Looking For ProcBody ---------------
------------Looking For ProcBody_1 ---------------
------------Looking For ProcDecl ---------------
------------Looking For Address ---------------
------------Looking For OptReturnData ---------------
------------Looking For ASSIGNstmt ---------------
------------Looking For ELSEIFlist_1 ---------------
------------Looking For ELSEstmt ---------------
------------Looking For Finish ---------------
------------Looking For STEPoption ---------------
------------Looking For CodeBlock ---------------
------------Looking For CodeBlock_1 ---------------
------------Looking For ArithExpr ---------------
	OptReturnData->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:OptReturnData->  (  ArithExpr  )
') Follow Set' { } U 'OptReturnData Follow Set' { } => ') Follow Set' { }
Rule 3:Finish->  ArithExpr
'ArithExpr Follow Set' { ')' } U 'Finish Follow Set' { } => 'ArithExpr Follow Set' { ')' }
	Factor->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:Factor->  (  ArithExpr  )
') Follow Set' { } U 'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => ') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MemContentsType->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:MemContentsType->  (  ArithExpr  )
') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => ') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For LogicalOR_1 ---------------
------------Looking For LogicalAND ---------------
	ArithExpr->  LogicalAND  LogicalOR_1
Is ϵ in Set LogicalOR_1 First Set
TRUE
Rule 2 3 4:ArithExpr->  LogicalAND  LogicalOR_1
'LogicalOR_1 Follow Set' { ')' } U 'ArithExpr Follow Set' { ')' } => 'LogicalOR_1 Follow Set' { ')' }
'LogicalAND Follow Set' { 'OR',')' } U 'ArithExpr Follow Set' { ')' } => 'LogicalAND Follow Set' { 'OR',')' }
	LogicalOR_1->  OR  LogicalAND  LogicalOR_1
Is ϵ in Set LogicalOR_1 First Set
TRUE
Rule 2 3 4:LogicalOR_1->  OR  LogicalAND  LogicalOR_1
'LogicalOR_1 Follow Set' { ')' } U 'LogicalOR_1 Follow Set' { ')' } => 'LogicalOR_1 Follow Set' { ')' }
'LogicalAND Follow Set' { 'OR',')' } U 'LogicalOR_1 Follow Set' { ')' } => 'LogicalAND Follow Set' { 'OR',')' }
------------Looking For LogicalAND_1 ---------------
------------Looking For RelOperation ---------------
	LogicalAND->  RelOperation  LogicalAND_1
Is ϵ in Set LogicalAND_1 First Set
TRUE
Rule 2 3 4:LogicalAND->  RelOperation  LogicalAND_1
'LogicalAND_1 Follow Set' { 'OR',')' } U 'LogicalAND Follow Set' { 'OR',')' } => 'LogicalAND_1 Follow Set' { 'OR',')' }
'RelOperation Follow Set' { 'AND','OR',')' } U 'LogicalAND Follow Set' { 'OR',')' } => 'RelOperation Follow Set' { 'AND','OR',')' }
	LogicalAND_1->  AND  RelOperation  LogicalAND_1
Is ϵ in Set LogicalAND_1 First Set
TRUE
Rule 2 3 4:LogicalAND_1->  AND  RelOperation  LogicalAND_1
'LogicalAND_1 Follow Set' { 'OR',')' } U 'LogicalAND_1 Follow Set' { 'OR',')' } => 'LogicalAND_1 Follow Set' { 'OR',')' }
'RelOperation Follow Set' { 'AND','OR',')' } U 'LogicalAND_1 Follow Set' { 'OR',')' } => 'RelOperation Follow Set' { 'AND','OR',')' }
------------Looking For RelOperation_1 ---------------
------------Looking For RelEquals ---------------
	RelOperation->  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation->  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  >  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  >  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  <  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  <  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  GTEQ  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  GTEQ  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  LTEQ  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  LTEQ  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For RelEquals_1 ---------------
------------Looking For BitwiseOR ---------------
	RelEquals->  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals->  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	RelEquals_1->  =  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals_1->  =  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	RelEquals_1->  #  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals_1->  #  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For BitwiseOR_1 ---------------
------------Looking For BitwiseAND ---------------
	BitwiseOR->  BitwiseAND  BitwiseOR_1
Is ϵ in Set BitwiseOR_1 First Set
TRUE
Rule 2 3 4:BitwiseOR->  BitwiseAND  BitwiseOR_1
'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1
Is ϵ in Set BitwiseOR_1 First Set
TRUE
Rule 2 3 4:BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1
'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For BitwiseAND_1 ---------------
------------Looking For BitwiseXOR ---------------
	BitwiseAND->  BitwiseXOR  BitwiseAND_1
Is ϵ in Set BitwiseAND_1 First Set
TRUE
Rule 2 3 4:BitwiseAND->  BitwiseXOR  BitwiseAND_1
'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1
Is ϵ in Set BitwiseAND_1 First Set
TRUE
Rule 2 3 4:BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1
'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For SimpleRelExpr_1 ---------------
------------Looking For AddExpr ---------------
	BitwiseXOR->  AddExpr  SimpleRelExpr_1
Is ϵ in Set SimpleRelExpr_1 First Set
TRUE
Rule 2 3 4:BitwiseXOR->  AddExpr  SimpleRelExpr_1
'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1
Is ϵ in Set SimpleRelExpr_1 First Set
TRUE
Rule 2 3 4:SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1
'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For AddExpr_1 ---------------
------------Looking For ShifExpr ---------------
	AddExpr->  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr->  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	AddExpr_1->  +  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr_1->  +  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	AddExpr_1->  -  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr_1->  -  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For ShiftExpr_1 ---------------
------------Looking For MultExpr ---------------
	ShifExpr->  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShifExpr->  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For MultExpr_1 ---------------
------------Looking For Unary ---------------
	MultExpr->  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr->  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  *  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  *  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  /  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  /  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  MOD  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  MOD  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For Factor ---------------
Rule 3:Unary->  Factor
'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For CompConst ---------------
Rule 3:Address->  CompConst
'CompConst Follow Set' { ',' } U 'Address Follow Set' { } => 'CompConst Follow Set' { ',' }
	CodeBlock->  CompConst  CodeBlock_1
Is ϵ in Set CodeBlock_1 First Set
TRUE
Rule 2 3 4:CodeBlock->  CompConst  CodeBlock_1
'CodeBlock_1 Follow Set' { } U 'CodeBlock Follow Set' { } => 'CodeBlock_1 Follow Set' { }
'CompConst Follow Set' { ',' } U 'CodeBlock Follow Set' { } => 'CompConst Follow Set' { ',' }
	CodeBlock_1->  ,  CompConst  CodeBlock_1
Is ϵ in Set CodeBlock_1 First Set
TRUE
Rule 2 3 4:CodeBlock_1->  ,  CompConst  CodeBlock_1
'CodeBlock_1 Follow Set' { } U 'CodeBlock_1 Follow Set' { } => 'CodeBlock_1 Follow Set' { }
'CompConst Follow Set' { ',' } U 'CodeBlock_1 Follow Set' { } => 'CompConst Follow Set' { ',' }
	OptArrayInit_1->  CompConst  OptArrayInit_3
Is ϵ in Set OptArrayInit_3 First Set
TRUE
Rule 2 3 4:OptArrayInit_1->  CompConst  OptArrayInit_3
'OptArrayInit_3 Follow Set' { } U 'OptArrayInit_1 Follow Set' { } => 'OptArrayInit_3 Follow Set' { }
'CompConst Follow Set' { ',' } U 'OptArrayInit_1 Follow Set' { } => 'CompConst Follow Set' { ',' }
	OptArrayInit_3->  ,  CompConst  OptArrayInit_3
Is ϵ in Set OptArrayInit_3 First Set
TRUE
Rule 2 3 4:OptArrayInit_3->  ,  CompConst  OptArrayInit_3
'OptArrayInit_3 Follow Set' { } U 'OptArrayInit_3 Follow Set' { } => 'OptArrayInit_3 Follow Set' { }
'CompConst Follow Set' { ',' } U 'OptArrayInit_3 Follow Set' { } => 'CompConst Follow Set' { ',' }
------------Looking For CompConst_1 ---------------
------------Looking For BaseCompConst ---------------
	CompConst->  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst->  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { ',' } U 'CompConst Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-',',' } U 'CompConst Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
	CompConst_1->  +  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst_1->  +  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { ',' } U 'CompConst_1 Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-',',' } U 'CompConst_1 Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
	CompConst_1->  -  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst_1->  -  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { ',' } U 'CompConst_1 Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-',',' } U 'CompConst_1 Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
------------Looking For FundType ---------------
------------Looking For OptModifier ---------------
------------Looking For VarDecls ---------------
------------Looking For SysDecls ---------------
	ProcBody->  SysDecls  ProcBody_1
Is ϵ in Set ProcBody_1 First Set
FALSE
Rule 2 3:ProcBody->  SysDecls  ProcBody_1
'ProcBody_1 Follow Set' { } U 'ProcBody Follow Set' { } => 'ProcBody_1 Follow Set' { }
------------Looking For SysDecls_1 ---------------
------------Looking For SysDecl ---------------
	SysDecls->  SysDecl  SysDecls_1
Is ϵ in Set SysDecls_1 First Set
TRUE
Rule 2 3 4:SysDecls->  SysDecl  SysDecls_1
'SysDecls_1 Follow Set' { } U 'SysDecls Follow Set' { } => 'SysDecls_1 Follow Set' { }
'SysDecl Follow Set' { ';' } U 'SysDecls Follow Set' { } => 'SysDecl Follow Set' { ';' }
	SysDecls_1->  ;  SysDecl  SysDecls_1
Is ϵ in Set SysDecls_1 First Set
TRUE
Rule 2 3 4:SysDecls_1->  ;  SysDecl  SysDecls_1
'SysDecls_1 Follow Set' { } U 'SysDecls_1 Follow Set' { } => 'SysDecls_1 Follow Set' { }
'SysDecl Follow Set' { ';' } U 'SysDecls_1 Follow Set' { } => 'SysDecl Follow Set' { ';' }
------------Looking For DefList ---------------
------------Looking For DefList_1 ---------------
------------Looking For Def ---------------
	DefList->  Def  DefList_1
Is ϵ in Set DefList_1 First Set
TRUE
Rule 2 3 4:DefList->  Def  DefList_1
'DefList_1 Follow Set' { } U 'DefList Follow Set' { } => 'DefList_1 Follow Set' { }
'Def Follow Set' { ',' } U 'DefList Follow Set' { } => 'Def Follow Set' { ',' }
	DefList_1->  ,  Def  DefList_1
Is ϵ in Set DefList_1 First Set
TRUE
Rule 2 3 4:DefList_1->  ,  Def  DefList_1
'DefList_1 Follow Set' { } U 'DefList_1 Follow Set' { } => 'DefList_1 Follow Set' { }
'Def Follow Set' { ',' } U 'DefList_1 Follow Set' { } => 'Def Follow Set' { ',' }
------------Looking For RecIdentList ---------------
------------Looking For RecIdent ---------------
	RecIdentList->  RecIdent  RecIdentList
Is ϵ in Set RecIdentList First Set
FALSE
Rule 2 3:RecIdentList->  RecIdent  RecIdentList
'RecIdentList Follow Set' { } U 'RecIdentList Follow Set' { } => 'RecIdentList Follow Set' { }
	RecIdentLst->  ,  RecIdent  RecIdentLst_1
Is ϵ in Set RecIdentLst_1 First Set
FALSE
Rule 2 3:RecIdentLst->  ,  RecIdent  RecIdentLst_1
'RecIdentLst_1 Follow Set' { } U 'RecIdentLst Follow Set' { } => 'RecIdentLst_1 Follow Set' { }
------------Looking For RecIdentLst ---------------
------------Looking For OptRecInit ---------------
------------Looking For BOOLDecl ---------------
------------Looking For BOOLDecl_1 ---------------
------------Looking For VarList ---------------
------------Looking For VarList_1 ---------------
------------Looking For VarName ---------------
	VarList->  VarName  VarList_1
Is ϵ in Set VarList_1 First Set
TRUE
Rule 2 3 4:VarList->  VarName  VarList_1
'VarList_1 Follow Set' { } U 'VarList Follow Set' { ';' } => 'VarList_1 Follow Set' { ';' }
'VarName Follow Set' { ',' } U 'VarList Follow Set' { ';' } => 'VarName Follow Set' { ',',';' }
	VarList_1->  ,  VarName  VarList_1
Is ϵ in Set VarList_1 First Set
TRUE
Rule 2 3 4:VarList_1->  ,  VarName  VarList_1
'VarList_1 Follow Set' { ';' } U 'VarList_1 Follow Set' { ';' } => 'VarList_1 Follow Set' { ';' }
'VarName Follow Set' { ',',';' } U 'VarList_1 Follow Set' { ';' } => 'VarName Follow Set' { ',',';' }
------------Looking For OptInit ---------------
	BOOLDecl->  Ident  OptInit  BOOLDecl_1
Is ϵ in Set BOOLDecl_1 First Set
TRUE
Rule 2 3 4:BOOLDecl->  Ident  OptInit  BOOLDecl_1
'BOOLDecl_1 Follow Set' { } U 'BOOLDecl Follow Set' { } => 'BOOLDecl_1 Follow Set' { }
'OptInit Follow Set' { ',' } U 'BOOLDecl Follow Set' { } => 'OptInit Follow Set' { ',' }
	BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1
Is ϵ in Set BOOLDecl_1 First Set
TRUE
Rule 2 3 4:BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1
'BOOLDecl_1 Follow Set' { } U 'BOOLDecl_1 Follow Set' { } => 'BOOLDecl_1 Follow Set' { }
'OptInit Follow Set' { ',' } U 'BOOLDecl_1 Follow Set' { } => 'OptInit Follow Set' { ',' }
------------Looking For Modifier ---------------
	SysDecl->  RECORDTYPE  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  RECORDTYPE  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  CHAR  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  CHAR  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  BYTE  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  BYTE  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  INT  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  INT  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  CARD  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  CARD  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
------------Looking For ArrayStuff ---------------
------------Looking For OptArrayInit ---------------
------------Looking For OptArrayInit_1 ---------------
------------Looking For OptArrayInit_3 ---------------
------------Looking For MemContents ---------------
Rule 3:Factor->  MemContents
'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For MemContentsType ---------------
------------Looking For Ident ---------------
Rule 3:BaseCompConst->  Ident
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BaseCompConst Follow Set' { '+','-',',' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	RecIdent->  Ident  OptRecInit
Is ϵ in Set OptRecInit First Set
TRUE
Rule 2 3 4:RecIdent->  Ident  OptRecInit
'OptRecInit Follow Set' { 'IDENT','NUMBER' } U 'RecIdent Follow Set' { 'IDENT','NUMBER' } => 'OptRecInit Follow Set' { 'IDENT','NUMBER' }
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RecIdent Follow Set' { 'IDENT','NUMBER' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	VarName->  Ident  OptInit
Is ϵ in Set OptInit First Set
TRUE
Rule 2 3 4:VarName->  Ident  OptInit
'OptInit Follow Set' { ',' } U 'VarName Follow Set' { ',',';' } => 'OptInit Follow Set' { ',',';' }
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'VarName Follow Set' { ',',';' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' }
	MemContents->  Ident  MemContentsType
Is ϵ in Set MemContentsType First Set
TRUE
Rule 2 3 4:MemContents->  Ident  MemContentsType
'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' } U 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' }
######### Follow Set Itteration #3
------------Looking For Action65 ---------------
------------Looking For Program ---------------
Rule 3:Action65->  Program
'Program Follow Set' { '$' } U 'Action65 Follow Set' { '$' } => 'Program Follow Set' { '$' }
------------Looking For Module ---------------
Rule 3:Program->  Module
'Module Follow Set' { '$' } U 'Program Follow Set' { '$' } => 'Module Follow Set' { '$' }
------------Looking For Module_1 ---------------
------------Looking For Routine ---------------
	Module->  SysDecls  Routine  Module_1
Is ϵ in Set Module_1 First Set
TRUE
Rule 2 3 4:Module->  SysDecls  Routine  Module_1
'Module_1 Follow Set' { '$' } U 'Module Follow Set' { '$' } => 'Module_1 Follow Set' { '$' }
'Routine Follow Set' { 'MODULE','$' } U 'Module Follow Set' { '$' } => 'Routine Follow Set' { 'MODULE','$' }
	Module_1->  MODULE  SysDecls  Routine  Module_1
Is ϵ in Set Module_1 First Set
TRUE
Rule 2 3 4:Module_1->  MODULE  SysDecls  Routine  Module_1
'Module_1 Follow Set' { '$' } U 'Module_1 Follow Set' { '$' } => 'Module_1 Follow Set' { '$' }
'Routine Follow Set' { 'MODULE','$' } U 'Module_1 Follow Set' { '$' } => 'Routine Follow Set' { 'MODULE','$' }
------------Looking For ProcBody ---------------
------------Looking For ProcBody_1 ---------------
------------Looking For ProcDecl ---------------
------------Looking For Address ---------------
------------Looking For OptReturnData ---------------
------------Looking For ASSIGNstmt ---------------
------------Looking For ELSEIFlist_1 ---------------
------------Looking For ELSEstmt ---------------
------------Looking For Finish ---------------
------------Looking For STEPoption ---------------
------------Looking For CodeBlock ---------------
------------Looking For CodeBlock_1 ---------------
------------Looking For ArithExpr ---------------
	OptReturnData->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:OptReturnData->  (  ArithExpr  )
') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'OptReturnData Follow Set' { } => ') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
Rule 3:Finish->  ArithExpr
'ArithExpr Follow Set' { ')' } U 'Finish Follow Set' { } => 'ArithExpr Follow Set' { ')' }
	Factor->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:Factor->  (  ArithExpr  )
') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => ') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MemContentsType->  (  ArithExpr  )
Is ϵ in Set ) First Set
FALSE
Rule 2 3:MemContentsType->  (  ArithExpr  )
') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => ') Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For LogicalOR_1 ---------------
------------Looking For LogicalAND ---------------
	ArithExpr->  LogicalAND  LogicalOR_1
Is ϵ in Set LogicalOR_1 First Set
TRUE
Rule 2 3 4:ArithExpr->  LogicalAND  LogicalOR_1
'LogicalOR_1 Follow Set' { ')' } U 'ArithExpr Follow Set' { ')' } => 'LogicalOR_1 Follow Set' { ')' }
'LogicalAND Follow Set' { 'OR',')' } U 'ArithExpr Follow Set' { ')' } => 'LogicalAND Follow Set' { 'OR',')' }
	LogicalOR_1->  OR  LogicalAND  LogicalOR_1
Is ϵ in Set LogicalOR_1 First Set
TRUE
Rule 2 3 4:LogicalOR_1->  OR  LogicalAND  LogicalOR_1
'LogicalOR_1 Follow Set' { ')' } U 'LogicalOR_1 Follow Set' { ')' } => 'LogicalOR_1 Follow Set' { ')' }
'LogicalAND Follow Set' { 'OR',')' } U 'LogicalOR_1 Follow Set' { ')' } => 'LogicalAND Follow Set' { 'OR',')' }
------------Looking For LogicalAND_1 ---------------
------------Looking For RelOperation ---------------
	LogicalAND->  RelOperation  LogicalAND_1
Is ϵ in Set LogicalAND_1 First Set
TRUE
Rule 2 3 4:LogicalAND->  RelOperation  LogicalAND_1
'LogicalAND_1 Follow Set' { 'OR',')' } U 'LogicalAND Follow Set' { 'OR',')' } => 'LogicalAND_1 Follow Set' { 'OR',')' }
'RelOperation Follow Set' { 'AND','OR',')' } U 'LogicalAND Follow Set' { 'OR',')' } => 'RelOperation Follow Set' { 'AND','OR',')' }
	LogicalAND_1->  AND  RelOperation  LogicalAND_1
Is ϵ in Set LogicalAND_1 First Set
TRUE
Rule 2 3 4:LogicalAND_1->  AND  RelOperation  LogicalAND_1
'LogicalAND_1 Follow Set' { 'OR',')' } U 'LogicalAND_1 Follow Set' { 'OR',')' } => 'LogicalAND_1 Follow Set' { 'OR',')' }
'RelOperation Follow Set' { 'AND','OR',')' } U 'LogicalAND_1 Follow Set' { 'OR',')' } => 'RelOperation Follow Set' { 'AND','OR',')' }
------------Looking For RelOperation_1 ---------------
------------Looking For RelEquals ---------------
	RelOperation->  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation->  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  >  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  >  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  <  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  <  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  GTEQ  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  GTEQ  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
	RelOperation_1->  LTEQ  RelEquals  RelOperation_1
Is ϵ in Set RelOperation_1 First Set
TRUE
Rule 2 3 4:RelOperation_1->  LTEQ  RelEquals  RelOperation_1
'RelOperation_1 Follow Set' { 'AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelOperation_1 Follow Set' { 'AND','OR',')' }
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelOperation_1 Follow Set' { 'AND','OR',')' } => 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For RelEquals_1 ---------------
------------Looking For BitwiseOR ---------------
	RelEquals->  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals->  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	RelEquals_1->  =  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals_1->  =  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	RelEquals_1->  #  BitwiseOR  RelEquals_1
Is ϵ in Set RelEquals_1 First Set
TRUE
Rule 2 3 4:RelEquals_1->  #  BitwiseOR  RelEquals_1
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For BitwiseOR_1 ---------------
------------Looking For BitwiseAND ---------------
	BitwiseOR->  BitwiseAND  BitwiseOR_1
Is ϵ in Set BitwiseOR_1 First Set
TRUE
Rule 2 3 4:BitwiseOR->  BitwiseAND  BitwiseOR_1
'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1
Is ϵ in Set BitwiseOR_1 First Set
TRUE
Rule 2 3 4:BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1
'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For BitwiseAND_1 ---------------
------------Looking For BitwiseXOR ---------------
	BitwiseAND->  BitwiseXOR  BitwiseAND_1
Is ϵ in Set BitwiseAND_1 First Set
TRUE
Rule 2 3 4:BitwiseAND->  BitwiseXOR  BitwiseAND_1
'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1
Is ϵ in Set BitwiseAND_1 First Set
TRUE
Rule 2 3 4:BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1
'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For SimpleRelExpr_1 ---------------
------------Looking For AddExpr ---------------
	BitwiseXOR->  AddExpr  SimpleRelExpr_1
Is ϵ in Set SimpleRelExpr_1 First Set
TRUE
Rule 2 3 4:BitwiseXOR->  AddExpr  SimpleRelExpr_1
'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1
Is ϵ in Set SimpleRelExpr_1 First Set
TRUE
Rule 2 3 4:SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1
'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For AddExpr_1 ---------------
------------Looking For ShifExpr ---------------
	AddExpr->  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr->  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	AddExpr_1->  +  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr_1->  +  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	AddExpr_1->  -  ShifExpr  AddExpr_1
Is ϵ in Set AddExpr_1 First Set
TRUE
Rule 2 3 4:AddExpr_1->  -  ShifExpr  AddExpr_1
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For ShiftExpr_1 ---------------
------------Looking For MultExpr ---------------
	ShifExpr->  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShifExpr->  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1
Is ϵ in Set ShiftExpr_1 First Set
TRUE
Rule 2 3 4:ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For MultExpr_1 ---------------
------------Looking For Unary ---------------
	MultExpr->  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr->  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  *  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  *  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  /  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  /  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
	MultExpr_1->  MOD  Unary  MultExpr_1
Is ϵ in Set MultExpr_1 First Set
TRUE
Rule 2 3 4:MultExpr_1->  MOD  Unary  MultExpr_1
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For Factor ---------------
Rule 3:Unary->  Factor
'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For CompConst ---------------
Rule 3:Address->  CompConst
'CompConst Follow Set' { ',' } U 'Address Follow Set' { } => 'CompConst Follow Set' { ',' }
	CodeBlock->  CompConst  CodeBlock_1
Is ϵ in Set CodeBlock_1 First Set
TRUE
Rule 2 3 4:CodeBlock->  CompConst  CodeBlock_1
'CodeBlock_1 Follow Set' { } U 'CodeBlock Follow Set' { } => 'CodeBlock_1 Follow Set' { }
'CompConst Follow Set' { ',' } U 'CodeBlock Follow Set' { } => 'CompConst Follow Set' { ',' }
	CodeBlock_1->  ,  CompConst  CodeBlock_1
Is ϵ in Set CodeBlock_1 First Set
TRUE
Rule 2 3 4:CodeBlock_1->  ,  CompConst  CodeBlock_1
'CodeBlock_1 Follow Set' { } U 'CodeBlock_1 Follow Set' { } => 'CodeBlock_1 Follow Set' { }
'CompConst Follow Set' { ',' } U 'CodeBlock_1 Follow Set' { } => 'CompConst Follow Set' { ',' }
	OptArrayInit_1->  CompConst  OptArrayInit_3
Is ϵ in Set OptArrayInit_3 First Set
TRUE
Rule 2 3 4:OptArrayInit_1->  CompConst  OptArrayInit_3
'OptArrayInit_3 Follow Set' { } U 'OptArrayInit_1 Follow Set' { } => 'OptArrayInit_3 Follow Set' { }
'CompConst Follow Set' { ',' } U 'OptArrayInit_1 Follow Set' { } => 'CompConst Follow Set' { ',' }
	OptArrayInit_3->  ,  CompConst  OptArrayInit_3
Is ϵ in Set OptArrayInit_3 First Set
TRUE
Rule 2 3 4:OptArrayInit_3->  ,  CompConst  OptArrayInit_3
'OptArrayInit_3 Follow Set' { } U 'OptArrayInit_3 Follow Set' { } => 'OptArrayInit_3 Follow Set' { }
'CompConst Follow Set' { ',' } U 'OptArrayInit_3 Follow Set' { } => 'CompConst Follow Set' { ',' }
------------Looking For CompConst_1 ---------------
------------Looking For BaseCompConst ---------------
	CompConst->  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst->  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { ',' } U 'CompConst Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-',',' } U 'CompConst Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
	CompConst_1->  +  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst_1->  +  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { ',' } U 'CompConst_1 Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-',',' } U 'CompConst_1 Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
	CompConst_1->  -  BaseCompConst  CompConst_1
Is ϵ in Set CompConst_1 First Set
TRUE
Rule 2 3 4:CompConst_1->  -  BaseCompConst  CompConst_1
'CompConst_1 Follow Set' { ',' } U 'CompConst_1 Follow Set' { ',' } => 'CompConst_1 Follow Set' { ',' }
'BaseCompConst Follow Set' { '+','-',',' } U 'CompConst_1 Follow Set' { ',' } => 'BaseCompConst Follow Set' { '+','-',',' }
------------Looking For FundType ---------------
------------Looking For OptModifier ---------------
------------Looking For VarDecls ---------------
------------Looking For SysDecls ---------------
	ProcBody->  SysDecls  ProcBody_1
Is ϵ in Set ProcBody_1 First Set
FALSE
Rule 2 3:ProcBody->  SysDecls  ProcBody_1
'ProcBody_1 Follow Set' { } U 'ProcBody Follow Set' { } => 'ProcBody_1 Follow Set' { }
------------Looking For SysDecls_1 ---------------
------------Looking For SysDecl ---------------
	SysDecls->  SysDecl  SysDecls_1
Is ϵ in Set SysDecls_1 First Set
TRUE
Rule 2 3 4:SysDecls->  SysDecl  SysDecls_1
'SysDecls_1 Follow Set' { } U 'SysDecls Follow Set' { } => 'SysDecls_1 Follow Set' { }
'SysDecl Follow Set' { ';' } U 'SysDecls Follow Set' { } => 'SysDecl Follow Set' { ';' }
	SysDecls_1->  ;  SysDecl  SysDecls_1
Is ϵ in Set SysDecls_1 First Set
TRUE
Rule 2 3 4:SysDecls_1->  ;  SysDecl  SysDecls_1
'SysDecls_1 Follow Set' { } U 'SysDecls_1 Follow Set' { } => 'SysDecls_1 Follow Set' { }
'SysDecl Follow Set' { ';' } U 'SysDecls_1 Follow Set' { } => 'SysDecl Follow Set' { ';' }
------------Looking For DefList ---------------
------------Looking For DefList_1 ---------------
------------Looking For Def ---------------
	DefList->  Def  DefList_1
Is ϵ in Set DefList_1 First Set
TRUE
Rule 2 3 4:DefList->  Def  DefList_1
'DefList_1 Follow Set' { } U 'DefList Follow Set' { } => 'DefList_1 Follow Set' { }
'Def Follow Set' { ',' } U 'DefList Follow Set' { } => 'Def Follow Set' { ',' }
	DefList_1->  ,  Def  DefList_1
Is ϵ in Set DefList_1 First Set
TRUE
Rule 2 3 4:DefList_1->  ,  Def  DefList_1
'DefList_1 Follow Set' { } U 'DefList_1 Follow Set' { } => 'DefList_1 Follow Set' { }
'Def Follow Set' { ',' } U 'DefList_1 Follow Set' { } => 'Def Follow Set' { ',' }
------------Looking For RecIdentList ---------------
------------Looking For RecIdent ---------------
	RecIdentList->  RecIdent  RecIdentList
Is ϵ in Set RecIdentList First Set
FALSE
Rule 2 3:RecIdentList->  RecIdent  RecIdentList
'RecIdentList Follow Set' { } U 'RecIdentList Follow Set' { } => 'RecIdentList Follow Set' { }
	RecIdentLst->  ,  RecIdent  RecIdentLst_1
Is ϵ in Set RecIdentLst_1 First Set
FALSE
Rule 2 3:RecIdentLst->  ,  RecIdent  RecIdentLst_1
'RecIdentLst_1 Follow Set' { } U 'RecIdentLst Follow Set' { } => 'RecIdentLst_1 Follow Set' { }
------------Looking For RecIdentLst ---------------
------------Looking For OptRecInit ---------------
------------Looking For BOOLDecl ---------------
------------Looking For BOOLDecl_1 ---------------
------------Looking For VarList ---------------
------------Looking For VarList_1 ---------------
------------Looking For VarName ---------------
	VarList->  VarName  VarList_1
Is ϵ in Set VarList_1 First Set
TRUE
Rule 2 3 4:VarList->  VarName  VarList_1
'VarList_1 Follow Set' { ';' } U 'VarList Follow Set' { ';' } => 'VarList_1 Follow Set' { ';' }
'VarName Follow Set' { ',',';' } U 'VarList Follow Set' { ';' } => 'VarName Follow Set' { ',',';' }
	VarList_1->  ,  VarName  VarList_1
Is ϵ in Set VarList_1 First Set
TRUE
Rule 2 3 4:VarList_1->  ,  VarName  VarList_1
'VarList_1 Follow Set' { ';' } U 'VarList_1 Follow Set' { ';' } => 'VarList_1 Follow Set' { ';' }
'VarName Follow Set' { ',',';' } U 'VarList_1 Follow Set' { ';' } => 'VarName Follow Set' { ',',';' }
------------Looking For OptInit ---------------
	BOOLDecl->  Ident  OptInit  BOOLDecl_1
Is ϵ in Set BOOLDecl_1 First Set
TRUE
Rule 2 3 4:BOOLDecl->  Ident  OptInit  BOOLDecl_1
'BOOLDecl_1 Follow Set' { } U 'BOOLDecl Follow Set' { } => 'BOOLDecl_1 Follow Set' { }
'OptInit Follow Set' { ',',';' } U 'BOOLDecl Follow Set' { } => 'OptInit Follow Set' { ',',';' }
	BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1
Is ϵ in Set BOOLDecl_1 First Set
TRUE
Rule 2 3 4:BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1
'BOOLDecl_1 Follow Set' { } U 'BOOLDecl_1 Follow Set' { } => 'BOOLDecl_1 Follow Set' { }
'OptInit Follow Set' { ',',';' } U 'BOOLDecl_1 Follow Set' { } => 'OptInit Follow Set' { ',',';' }
------------Looking For Modifier ---------------
	SysDecl->  RECORDTYPE  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  RECORDTYPE  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  CHAR  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  CHAR  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  BYTE  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  BYTE  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  INT  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  INT  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
	SysDecl->  CARD  Modifier  VarList
Is ϵ in Set VarList First Set
FALSE
Rule 2 3:SysDecl->  CARD  Modifier  VarList
'VarList Follow Set' { ';' } U 'SysDecl Follow Set' { ';' } => 'VarList Follow Set' { ';' }
------------Looking For ArrayStuff ---------------
------------Looking For OptArrayInit ---------------
------------Looking For OptArrayInit_1 ---------------
------------Looking For OptArrayInit_3 ---------------
------------Looking For MemContents ---------------
Rule 3:Factor->  MemContents
'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
------------Looking For MemContentsType ---------------
------------Looking For Ident ---------------
Rule 3:BaseCompConst->  Ident
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' } U 'BaseCompConst Follow Set' { '+','-',',' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' }
	RecIdent->  Ident  OptRecInit
Is ϵ in Set OptRecInit First Set
TRUE
Rule 2 3 4:RecIdent->  Ident  OptRecInit
'OptRecInit Follow Set' { 'IDENT','NUMBER' } U 'RecIdent Follow Set' { 'IDENT','NUMBER' } => 'OptRecInit Follow Set' { 'IDENT','NUMBER' }
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' } U 'RecIdent Follow Set' { 'IDENT','NUMBER' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' }
	VarName->  Ident  OptInit
Is ϵ in Set OptInit First Set
TRUE
Rule 2 3 4:VarName->  Ident  OptInit
'OptInit Follow Set' { ',',';' } U 'VarName Follow Set' { ',',';' } => 'OptInit Follow Set' { ',',';' }
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' } U 'VarName Follow Set' { ',',';' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' }
	MemContents->  Ident  MemContentsType
Is ϵ in Set MemContentsType First Set
TRUE
Rule 2 3 4:MemContents->  Ident  MemContentsType
'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } U 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' } U 'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' } => 'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' }
------------ Follow Sets ---------------
'PtrRef Follow Set' { }

'ArithExpr Follow Set' { ')' }

'Start Follow Set' { }

'RelOperation Follow Set' { 'AND','OR',')' }

'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'FUNCcall Follow Set' { }

'PROCcall Follow Set' { }

'ProcCall Follow Set' { }

'FuncCall Follow Set' { }

'DOloop Follow Set' { }

'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'ELSEIFlist_1 Follow Set' { }

'SysDecls Follow Set' { }

'Module_1 Follow Set' { '$' }

'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'LogicalAND_1 Follow Set' { 'OR',')' }

'DoLoop Follow Set' { }

'FORloop Follow Set' { }

'OptModifier Follow Set' { }

'RecIdentLst Follow Set' { }

'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'Routine Follow Set' { 'MODULE','$' }

'ProcInit Follow Set' { }

'WhileLoop Follow Set' { }

'ELSEIFlist Follow Set' { }

'CondExpr Follow Set' { }

'CardDecl Follow Set' { }

'RecIdent Follow Set' { 'IDENT','NUMBER' }

'Def Follow Set' { ',' }

'ProcBody_1 Follow Set' { }

'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'BOOLDecl Follow Set' { }

'OptArrayInit_1 Follow Set' { }

'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' }

'ASSIGNstmt Follow Set' { }

'OptArrayInit_2 Follow Set' { }

'ForStmt Follow Set' { }

'OptArrayInit_3 Follow Set' { }

'FieldInit Follow Set' { }

'BOOLDecl_1 Follow Set' { }

'RecordDecl Follow Set' { }

'VarDecls Follow Set' { }

'STEPoption Follow Set' { }

'Finish Follow Set' { }

'Address Follow Set' { }

'Module Follow Set' { '$' }

'ElseIf Follow Set' { }

'ELSEstmt Follow Set' { }

'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }

'SysDecl Follow Set' { ';' }

'DefList Follow Set' { }

'RecIdentList Follow Set' { }

'ProcDecl Follow Set' { }

'WHILEloop Follow Set' { }

'BaseCompConst Follow Set' { '+','-',',' }

'Modifier Follow Set' { 'IDENT','NUMBER' }

'Constant Follow Set' { }

'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'ArrayStuff Follow Set' { }

'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }

'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'RecIdentList_1 Follow Set' { }

'Program Follow Set' { '$' }

'ByteDecl Follow Set' { }

'VarList_1 Follow Set' { ';' }

'Identifier Follow Set' { }

'Action65 Follow Set' { '$' }

'LogicalOR_1 Follow Set' { ')' }

'VarList Follow Set' { ';' }

'OptInit Follow Set' { ',',';' }

'CodeBlock_1 Follow Set' { }

'CompConst_1 Follow Set' { ',' }

'SysDecls_1 Follow Set' { }

'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'CodeBlock Follow Set' { }

'LogicalAND Follow Set' { 'OR',')' }

'OptArrayInit Follow Set' { }

'UNTILLstmt Follow Set' { }

'OptRecInit Follow Set' { 'IDENT','NUMBER' }

'OptReturnData Follow Set' { }

'RelOperation_1 Follow Set' { 'AND','OR',')' }

'FundType Follow Set' { }

'Number Follow Set' { }

'CompConst Follow Set' { ',' }

'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }

'DefList_1 Follow Set' { }

'VarName Follow Set' { ',',';' }

'Statements Follow Set' { }

'RecIdentLst_1 Follow Set' { }

'ProcBody Follow Set' { }

'IFstmt Follow Set' { }

'CharDecl Follow Set' { }

'IfStmt Follow Set' { }

'IntDecl Follow Set' { }


---------------- Create Parse Table --------------
------- Action65 --------
################> Rule 1 <#################
--------  Action65->  Program--------
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'TempFirstY' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
******* MODULE ******
^^^^^^^ MODULE ^^^^^^^
******* PROC ******
^^^^^^^ PROC ^^^^^^^
******* FUNC ******
^^^^^^^ FUNC ^^^^^^^
******* DEFINE ******
^^^^^^^ DEFINE ^^^^^^^
******* TYPE ******
^^^^^^^ TYPE ^^^^^^^
******* RECORDTYPE ******
^^^^^^^ RECORDTYPE ^^^^^^^
******* CHAR ******
^^^^^^^ CHAR ^^^^^^^
******* BYTE ******
^^^^^^^ BYTE ^^^^^^^
******* INT ******
^^^^^^^ INT ^^^^^^^
******* CARD ******
^^^^^^^ CARD ^^^^^^^
******* BOOL ******
^^^^^^^ BOOL ^^^^^^^
'Action65 Follow Set' { '$' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Action65->  Program--------
Is 'ϵ' Not Contained in 'Program First Set'
			Compare 'ϵ' To 'MODULE'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { } U 'Program First Set' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'TempFirstY' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'MODULE'
 'PROC'
 'FUNC'
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- Program --------
################> Rule 1 <#################
--------  Program->  MODULE  Module--------
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'TempFirstY' { } U 'MODULE First Set' { 'MODULE' } => 'TempFirstY' { 'MODULE' }
******* MODULE ******
^^^^^^^ MODULE ^^^^^^^
--------  Program->  Module--------
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'TempFirstY' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
******* PROC ******
^^^^^^^ PROC ^^^^^^^
******* FUNC ******
^^^^^^^ FUNC ^^^^^^^
******* DEFINE ******
^^^^^^^ DEFINE ^^^^^^^
******* TYPE ******
^^^^^^^ TYPE ^^^^^^^
******* RECORDTYPE ******
^^^^^^^ RECORDTYPE ^^^^^^^
******* CHAR ******
^^^^^^^ CHAR ^^^^^^^
******* BYTE ******
^^^^^^^ BYTE ^^^^^^^
******* INT ******
^^^^^^^ INT ^^^^^^^
******* CARD ******
^^^^^^^ CARD ^^^^^^^
******* BOOL ******
^^^^^^^ BOOL ^^^^^^^
'Program Follow Set' { '$' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Program->  MODULE  Module--------
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'TempFirstY' { } U 'MODULE First Set' { 'MODULE' } => 'TempFirstY' { 'MODULE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'MODULE' }
 'MODULE'
--------  Program->  Module--------
Is 'ϵ' Not Contained in 'Module First Set'
			Compare 'ϵ' To 'PROC'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { 'MODULE' } U 'Module First Set' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => 'TempFirstY' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'MODULE','PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'MODULE'
 'PROC'
 'FUNC'
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- Module --------
################> Rule 1 <#################
--------  Module->  SysDecls  Routine  Module_1--------
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
******* PROC ******
^^^^^^^ PROC ^^^^^^^
******* FUNC ******
^^^^^^^ FUNC ^^^^^^^
******* DEFINE ******
^^^^^^^ DEFINE ^^^^^^^
******* TYPE ******
^^^^^^^ TYPE ^^^^^^^
******* RECORDTYPE ******
^^^^^^^ RECORDTYPE ^^^^^^^
******* CHAR ******
^^^^^^^ CHAR ^^^^^^^
******* BYTE ******
^^^^^^^ BYTE ^^^^^^^
******* INT ******
^^^^^^^ INT ^^^^^^^
******* CARD ******
^^^^^^^ CARD ^^^^^^^
******* BOOL ******
^^^^^^^ BOOL ^^^^^^^
'Module Follow Set' { '$' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Module->  SysDecls  Routine  Module_1--------
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'PROC','FUNC','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'PROC'
 'FUNC'
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- Module_1 --------
################> Rule 1 <#################
--------  Module_1->  MODULE  SysDecls  Routine  Module_1--------
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'TempFirstY' { } U 'MODULE First Set' { 'MODULE' } => 'TempFirstY' { 'MODULE' }
******* MODULE ******
^^^^^^^ MODULE ^^^^^^^
--------  Module_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'Module_1 Follow Set' { '$' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Module_1->  MODULE  SysDecls  Routine  Module_1--------
Is 'ϵ' Not Contained in 'MODULE First Set'
			Compare 'ϵ' To 'MODULE'
TRUE
'TempFirstY' { } U 'MODULE First Set' { 'MODULE' } => 'TempFirstY' { 'MODULE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'MODULE' }
 'MODULE'
--------  Module_1->  ϵ--------
'TempFirstY' { 'MODULE' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'MODULE','ϵ' }
'TempFirstY' { 'MODULE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'MODULE','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '$'
Is $ in Set Module_1 Follow Set
TRUE
'TempFirstY' { 'MODULE','ϵ' }
 'MODULE'
 'ϵ'
------- Routine --------
################> Rule 1 <#################
--------  Routine->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine--------
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'TempFirstY' { } U 'PROC First Set' { 'PROC' } => 'TempFirstY' { 'PROC' }
******* PROC ******
^^^^^^^ PROC ^^^^^^^
--------  Routine->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine--------
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'TempFirstY' { } U 'FUNC First Set' { 'FUNC' } => 'TempFirstY' { 'FUNC' }
******* FUNC ******
^^^^^^^ FUNC ^^^^^^^
--------  Routine->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'Routine Follow Set' { 'MODULE','$' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Routine->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine--------
Is 'ϵ' Not Contained in 'PROC First Set'
			Compare 'ϵ' To 'PROC'
TRUE
'TempFirstY' { } U 'PROC First Set' { 'PROC' } => 'TempFirstY' { 'PROC' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'PROC' }
 'PROC'
--------  Routine->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine--------
Is 'ϵ' Not Contained in 'FUNC First Set'
			Compare 'ϵ' To 'FUNC'
TRUE
'TempFirstY' { 'PROC' } U 'FUNC First Set' { 'FUNC' } => 'TempFirstY' { 'PROC','FUNC' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'PROC','FUNC' }
 'PROC'
 'FUNC'
--------  Routine->  ϵ--------
'TempFirstY' { 'PROC','FUNC' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'PROC','FUNC','ϵ' }
'TempFirstY' { 'PROC','FUNC','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'PROC','FUNC','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 'MODULE'
 '$'
Is $ in Set Routine Follow Set
TRUE
'TempFirstY' { 'PROC','FUNC','ϵ' }
 'PROC'
 'FUNC'
 'ϵ'
------- ProcBody --------
################> Rule 1 <#################
--------  ProcBody->  SysDecls  ProcBody_1--------
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
******* DEFINE ******
^^^^^^^ DEFINE ^^^^^^^
******* TYPE ******
^^^^^^^ TYPE ^^^^^^^
******* RECORDTYPE ******
^^^^^^^ RECORDTYPE ^^^^^^^
******* CHAR ******
^^^^^^^ CHAR ^^^^^^^
******* BYTE ******
^^^^^^^ BYTE ^^^^^^^
******* INT ******
^^^^^^^ INT ^^^^^^^
******* CARD ******
^^^^^^^ CARD ^^^^^^^
******* BOOL ******
^^^^^^^ BOOL ^^^^^^^
'ProcBody Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ProcBody->  SysDecls  ProcBody_1--------
Is 'ϵ' Not Contained in 'SysDecls First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecls First Set
TRUE
End of Y1Y2...Yk Chain
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- ProcBody_1 --------
################> Rule 1 <#################
--------  ProcBody_1->  Statements--------
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'TempFirstY' { } U 'Statements First Set' { } => 'TempFirstY' { }
'ProcBody_1 Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ProcBody_1->  Statements--------
Is 'ϵ' Not Contained in 'Statements First Set'
TRUE
'TempFirstY' { } U 'Statements First Set' { } => 'TempFirstY' { }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { }
------- ProcDecl --------
################> Rule 1 <#################
--------  ProcDecl->  Ident  ProcInit  (  VarDecls  )  ProcInit--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
--------  ProcDecl->  =  Address--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
******* = ******
^^^^^^^ = ^^^^^^^
--------  ProcDecl->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'ProcDecl Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ProcDecl->  Ident  ProcInit  (  VarDecls  )  ProcInit--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
--------  ProcDecl->  =  Address--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { 'IDENT','NUMBER' } U '= First Set' { '=' } => 'TempFirstY' { 'IDENT','NUMBER','=' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER','=' }
 'IDENT'
 'NUMBER'
 '='
--------  ProcDecl->  ϵ--------
'TempFirstY' { 'IDENT','NUMBER','=' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'IDENT','NUMBER','=','ϵ' }
'TempFirstY' { 'IDENT','NUMBER','=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'IDENT','NUMBER','=','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set ProcDecl Follow Set
FALSE
'TempFirstY' { 'IDENT','NUMBER','=','ϵ' }
 'IDENT'
 'NUMBER'
 '='
 'ϵ'
------- Address --------
################> Rule 1 <#################
--------  Address->  CompConst--------
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'TempFirstY' { '*','IDENT','NUMBER' }
******* * ******
^^^^^^^ * ^^^^^^^
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'Address Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Address->  CompConst--------
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'TempFirstY' { '*','IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '*','IDENT','NUMBER' }
 '*'
 'IDENT'
 'NUMBER'
------- OptReturnData --------
################> Rule 1 <#################
--------  OptReturnData->  (  ArithExpr  )--------
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'TempFirstY' { } U '( First Set' { '(' } => 'TempFirstY' { '(' }
******* ( ******
^^^^^^^ ( ^^^^^^^
--------  OptReturnData->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'OptReturnData Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  OptReturnData->  (  ArithExpr  )--------
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'TempFirstY' { } U '( First Set' { '(' } => 'TempFirstY' { '(' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '(' }
 '('
--------  OptReturnData->  ϵ--------
'TempFirstY' { '(' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '(','ϵ' }
'TempFirstY' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '(','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set OptReturnData Follow Set
FALSE
'TempFirstY' { '(','ϵ' }
 '('
 'ϵ'
------- ASSIGNstmt --------
################> Rule 1 <#################
--------  ASSIGNstmt->  =  ArithExpr--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
******* = ******
^^^^^^^ = ^^^^^^^
--------  ASSIGNstmt->  ==+  ArithExpr--------
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'TempFirstY' { } U '==+ First Set' { '==+' } => 'TempFirstY' { '==+' }
******* ==+ ******
^^^^^^^ ==+ ^^^^^^^
--------  ASSIGNstmt->  ==-  ArithExpr--------
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'TempFirstY' { } U '==- First Set' { '==-' } => 'TempFirstY' { '==-' }
******* ==- ******
^^^^^^^ ==- ^^^^^^^
--------  ASSIGNstmt->  ==*  ArithExpr--------
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'TempFirstY' { } U '==* First Set' { '==*' } => 'TempFirstY' { '==*' }
******* ==* ******
^^^^^^^ ==* ^^^^^^^
--------  ASSIGNstmt->  ==/  ArithExpr--------
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'TempFirstY' { } U '==/ First Set' { '==/' } => 'TempFirstY' { '==/' }
******* ==/ ******
^^^^^^^ ==/ ^^^^^^^
--------  ASSIGNstmt->  ==MOD  ArithExpr--------
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'TempFirstY' { } U '==MOD First Set' { '==MOD' } => 'TempFirstY' { '==MOD' }
******* ==MOD ******
^^^^^^^ ==MOD ^^^^^^^
--------  ASSIGNstmt->  ==&  ArithExpr--------
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'TempFirstY' { } U '==& First Set' { '==&' } => 'TempFirstY' { '==&' }
******* ==& ******
^^^^^^^ ==& ^^^^^^^
--------  ASSIGNstmt->  ==!  ArithExpr--------
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'TempFirstY' { } U '==! First Set' { '==!' } => 'TempFirstY' { '==!' }
******* ==! ******
^^^^^^^ ==! ^^^^^^^
--------  ASSIGNstmt->  ==XOR  ArithExpr--------
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'TempFirstY' { } U '==XOR First Set' { '==XOR' } => 'TempFirstY' { '==XOR' }
******* ==XOR ******
^^^^^^^ ==XOR ^^^^^^^
--------  ASSIGNstmt->  ==%  ArithExpr--------
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'TempFirstY' { } U '==% First Set' { '==%' } => 'TempFirstY' { '==%' }
******* ==% ******
^^^^^^^ ==% ^^^^^^^
--------  ASSIGNstmt->  ==LSH  ArithExpr--------
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'TempFirstY' { } U '==LSH First Set' { '==LSH' } => 'TempFirstY' { '==LSH' }
******* ==LSH ******
^^^^^^^ ==LSH ^^^^^^^
--------  ASSIGNstmt->  ==RSH  ArithExpr--------
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'TempFirstY' { } U '==RSH First Set' { '==RSH' } => 'TempFirstY' { '==RSH' }
******* ==RSH ******
^^^^^^^ ==RSH ^^^^^^^
--------  ASSIGNstmt->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'ASSIGNstmt Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ASSIGNstmt->  =  ArithExpr--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=' }
 '='
--------  ASSIGNstmt->  ==+  ArithExpr--------
Is 'ϵ' Not Contained in '==+ First Set'
			Compare 'ϵ' To '==+'
TRUE
'TempFirstY' { '=' } U '==+ First Set' { '==+' } => 'TempFirstY' { '=','==+' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+' }
 '='
 '==+'
--------  ASSIGNstmt->  ==-  ArithExpr--------
Is 'ϵ' Not Contained in '==- First Set'
			Compare 'ϵ' To '==-'
TRUE
'TempFirstY' { '=','==+' } U '==- First Set' { '==-' } => 'TempFirstY' { '=','==+','==-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-' }
 '='
 '==+'
 '==-'
--------  ASSIGNstmt->  ==*  ArithExpr--------
Is 'ϵ' Not Contained in '==* First Set'
			Compare 'ϵ' To '==*'
TRUE
'TempFirstY' { '=','==+','==-' } U '==* First Set' { '==*' } => 'TempFirstY' { '=','==+','==-','==*' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*' }
 '='
 '==+'
 '==-'
 '==*'
--------  ASSIGNstmt->  ==/  ArithExpr--------
Is 'ϵ' Not Contained in '==/ First Set'
			Compare 'ϵ' To '==/'
TRUE
'TempFirstY' { '=','==+','==-','==*' } U '==/ First Set' { '==/' } => 'TempFirstY' { '=','==+','==-','==*','==/' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*','==/' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
--------  ASSIGNstmt->  ==MOD  ArithExpr--------
Is 'ϵ' Not Contained in '==MOD First Set'
			Compare 'ϵ' To '==MOD'
TRUE
'TempFirstY' { '=','==+','==-','==*','==/' } U '==MOD First Set' { '==MOD' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
 '==MOD'
--------  ASSIGNstmt->  ==&  ArithExpr--------
Is 'ϵ' Not Contained in '==& First Set'
			Compare 'ϵ' To '==&'
TRUE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD' } U '==& First Set' { '==&' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
 '==MOD'
 '==&'
--------  ASSIGNstmt->  ==!  ArithExpr--------
Is 'ϵ' Not Contained in '==! First Set'
			Compare 'ϵ' To '==!'
TRUE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&' } U '==! First Set' { '==!' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
 '==MOD'
 '==&'
 '==!'
--------  ASSIGNstmt->  ==XOR  ArithExpr--------
Is 'ϵ' Not Contained in '==XOR First Set'
			Compare 'ϵ' To '==XOR'
TRUE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!' } U '==XOR First Set' { '==XOR' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
 '==MOD'
 '==&'
 '==!'
 '==XOR'
--------  ASSIGNstmt->  ==%  ArithExpr--------
Is 'ϵ' Not Contained in '==% First Set'
			Compare 'ϵ' To '==%'
TRUE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR' } U '==% First Set' { '==%' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
 '==MOD'
 '==&'
 '==!'
 '==XOR'
 '==%'
--------  ASSIGNstmt->  ==LSH  ArithExpr--------
Is 'ϵ' Not Contained in '==LSH First Set'
			Compare 'ϵ' To '==LSH'
TRUE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%' } U '==LSH First Set' { '==LSH' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
 '==MOD'
 '==&'
 '==!'
 '==XOR'
 '==%'
 '==LSH'
--------  ASSIGNstmt->  ==RSH  ArithExpr--------
Is 'ϵ' Not Contained in '==RSH First Set'
			Compare 'ϵ' To '==RSH'
TRUE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH' } U '==RSH First Set' { '==RSH' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
 '==MOD'
 '==&'
 '==!'
 '==XOR'
 '==%'
 '==LSH'
 '==RSH'
--------  ASSIGNstmt->  ϵ--------
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set ASSIGNstmt Follow Set
FALSE
'TempFirstY' { '=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','ϵ' }
 '='
 '==+'
 '==-'
 '==*'
 '==/'
 '==MOD'
 '==&'
 '==!'
 '==XOR'
 '==%'
 '==LSH'
 '==RSH'
 'ϵ'
------- ELSEIFlist_1 --------
################> Rule 1 <#################
--------  ELSEIFlist_1->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1--------
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'TempFirstY' { } U 'ELSEIF First Set' { 'ELSEIF' } => 'TempFirstY' { 'ELSEIF' }
******* ELSEIF ******
^^^^^^^ ELSEIF ^^^^^^^
--------  ELSEIFlist_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'ELSEIFlist_1 Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ELSEIFlist_1->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1--------
Is 'ϵ' Not Contained in 'ELSEIF First Set'
			Compare 'ϵ' To 'ELSEIF'
TRUE
'TempFirstY' { } U 'ELSEIF First Set' { 'ELSEIF' } => 'TempFirstY' { 'ELSEIF' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'ELSEIF' }
 'ELSEIF'
--------  ELSEIFlist_1->  ϵ--------
'TempFirstY' { 'ELSEIF' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ELSEIF','ϵ' }
'TempFirstY' { 'ELSEIF','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ELSEIF','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set ELSEIFlist_1 Follow Set
FALSE
'TempFirstY' { 'ELSEIF','ϵ' }
 'ELSEIF'
 'ϵ'
------- ELSEstmt --------
################> Rule 1 <#################
--------  ELSEstmt->  ELSE  Statements--------
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'TempFirstY' { } U 'ELSE First Set' { 'ELSE' } => 'TempFirstY' { 'ELSE' }
******* ELSE ******
^^^^^^^ ELSE ^^^^^^^
--------  ELSEstmt->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'ELSEstmt Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ELSEstmt->  ELSE  Statements--------
Is 'ϵ' Not Contained in 'ELSE First Set'
			Compare 'ϵ' To 'ELSE'
TRUE
'TempFirstY' { } U 'ELSE First Set' { 'ELSE' } => 'TempFirstY' { 'ELSE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'ELSE' }
 'ELSE'
--------  ELSEstmt->  ϵ--------
'TempFirstY' { 'ELSE' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ELSE','ϵ' }
'TempFirstY' { 'ELSE','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ELSE','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set ELSEstmt Follow Set
FALSE
'TempFirstY' { 'ELSE','ϵ' }
 'ELSE'
 'ϵ'
------- Finish --------
################> Rule 1 <#################
--------  Finish->  ArithExpr--------
Is 'ϵ' Not Contained in 'ArithExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'ArithExpr First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'Finish Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Finish->  ArithExpr--------
Is 'ϵ' Not Contained in 'ArithExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'ArithExpr First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- STEPoption --------
################> Rule 1 <#################
--------  STEPoption->  STEP  ArithExpr--------
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'TempFirstY' { } U 'STEP First Set' { 'STEP' } => 'TempFirstY' { 'STEP' }
******* STEP ******
^^^^^^^ STEP ^^^^^^^
--------  STEPoption->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'STEPoption Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  STEPoption->  STEP  ArithExpr--------
Is 'ϵ' Not Contained in 'STEP First Set'
			Compare 'ϵ' To 'STEP'
TRUE
'TempFirstY' { } U 'STEP First Set' { 'STEP' } => 'TempFirstY' { 'STEP' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'STEP' }
 'STEP'
--------  STEPoption->  ϵ--------
'TempFirstY' { 'STEP' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'STEP','ϵ' }
'TempFirstY' { 'STEP','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'STEP','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set STEPoption Follow Set
FALSE
'TempFirstY' { 'STEP','ϵ' }
 'STEP'
 'ϵ'
------- CodeBlock --------
################> Rule 1 <#################
--------  CodeBlock->  CompConst  CodeBlock_1--------
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'TempFirstY' { '*','IDENT','NUMBER' }
******* * ******
^^^^^^^ * ^^^^^^^
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'CodeBlock Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  CodeBlock->  CompConst  CodeBlock_1--------
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'TempFirstY' { '*','IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '*','IDENT','NUMBER' }
 '*'
 'IDENT'
 'NUMBER'
------- CodeBlock_1 --------
################> Rule 1 <#################
--------  CodeBlock_1->  ,  CompConst  CodeBlock_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
******* , ******
^^^^^^^ , ^^^^^^^
--------  CodeBlock_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'CodeBlock_1 Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  CodeBlock_1->  ,  CompConst  CodeBlock_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { ',' }
 ','
--------  CodeBlock_1->  ϵ--------
'TempFirstY' { ',' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
'TempFirstY' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set CodeBlock_1 Follow Set
FALSE
'TempFirstY' { ',','ϵ' }
 ','
 'ϵ'
------- ArithExpr --------
################> Rule 1 <#################
--------  ArithExpr->  LogicalAND  LogicalOR_1--------
Is 'ϵ' Not Contained in 'LogicalAND First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'LogicalAND First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'ArithExpr Follow Set' { ')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ArithExpr->  LogicalAND  LogicalOR_1--------
Is 'ϵ' Not Contained in 'LogicalAND First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'LogicalAND First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- LogicalOR_1 --------
################> Rule 1 <#################
--------  LogicalOR_1->  OR  LogicalAND  LogicalOR_1--------
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'TempFirstY' { } U 'OR First Set' { 'OR' } => 'TempFirstY' { 'OR' }
******* OR ******
^^^^^^^ OR ^^^^^^^
--------  LogicalOR_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'LogicalOR_1 Follow Set' { ')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  LogicalOR_1->  OR  LogicalAND  LogicalOR_1--------
Is 'ϵ' Not Contained in 'OR First Set'
			Compare 'ϵ' To 'OR'
TRUE
'TempFirstY' { } U 'OR First Set' { 'OR' } => 'TempFirstY' { 'OR' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'OR' }
 'OR'
--------  LogicalOR_1->  ϵ--------
'TempFirstY' { 'OR' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'OR','ϵ' }
'TempFirstY' { 'OR','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'OR','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 ')'
Is $ in Set LogicalOR_1 Follow Set
FALSE
'TempFirstY' { 'OR','ϵ' }
 'OR'
 'ϵ'
------- LogicalAND --------
################> Rule 1 <#################
--------  LogicalAND->  RelOperation  LogicalAND_1--------
Is 'ϵ' Not Contained in 'RelOperation First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'RelOperation First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'LogicalAND Follow Set' { 'OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  LogicalAND->  RelOperation  LogicalAND_1--------
Is 'ϵ' Not Contained in 'RelOperation First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'RelOperation First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- LogicalAND_1 --------
################> Rule 1 <#################
--------  LogicalAND_1->  AND  RelOperation  LogicalAND_1--------
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'TempFirstY' { } U 'AND First Set' { 'AND' } => 'TempFirstY' { 'AND' }
******* AND ******
^^^^^^^ AND ^^^^^^^
--------  LogicalAND_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'LogicalAND_1 Follow Set' { 'OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  LogicalAND_1->  AND  RelOperation  LogicalAND_1--------
Is 'ϵ' Not Contained in 'AND First Set'
			Compare 'ϵ' To 'AND'
TRUE
'TempFirstY' { } U 'AND First Set' { 'AND' } => 'TempFirstY' { 'AND' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'AND' }
 'AND'
--------  LogicalAND_1->  ϵ--------
'TempFirstY' { 'AND' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'AND','ϵ' }
'TempFirstY' { 'AND','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'AND','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 'OR'
 ')'
Is $ in Set LogicalAND_1 Follow Set
FALSE
'TempFirstY' { 'AND','ϵ' }
 'AND'
 'ϵ'
------- RelOperation --------
################> Rule 1 <#################
--------  RelOperation->  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in 'RelEquals First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'RelEquals First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'RelOperation Follow Set' { 'AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  RelOperation->  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in 'RelEquals First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'RelEquals First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- RelOperation_1 --------
################> Rule 1 <#################
--------  RelOperation_1->  >  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'TempFirstY' { } U '> First Set' { '>' } => 'TempFirstY' { '>' }
******* > ******
^^^^^^^ > ^^^^^^^
--------  RelOperation_1->  <  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'TempFirstY' { } U '< First Set' { '<' } => 'TempFirstY' { '<' }
******* < ******
^^^^^^^ < ^^^^^^^
--------  RelOperation_1->  GTEQ  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'TempFirstY' { } U 'GTEQ First Set' { 'GTEQ' } => 'TempFirstY' { 'GTEQ' }
******* GTEQ ******
^^^^^^^ GTEQ ^^^^^^^
--------  RelOperation_1->  LTEQ  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'TempFirstY' { } U 'LTEQ First Set' { 'LTEQ' } => 'TempFirstY' { 'LTEQ' }
******* LTEQ ******
^^^^^^^ LTEQ ^^^^^^^
--------  RelOperation_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'RelOperation_1 Follow Set' { 'AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  RelOperation_1->  >  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in '> First Set'
			Compare 'ϵ' To '>'
TRUE
'TempFirstY' { } U '> First Set' { '>' } => 'TempFirstY' { '>' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '>' }
 '>'
--------  RelOperation_1->  <  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in '< First Set'
			Compare 'ϵ' To '<'
TRUE
'TempFirstY' { '>' } U '< First Set' { '<' } => 'TempFirstY' { '>','<' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '>','<' }
 '>'
 '<'
--------  RelOperation_1->  GTEQ  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in 'GTEQ First Set'
			Compare 'ϵ' To 'GTEQ'
TRUE
'TempFirstY' { '>','<' } U 'GTEQ First Set' { 'GTEQ' } => 'TempFirstY' { '>','<','GTEQ' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '>','<','GTEQ' }
 '>'
 '<'
 'GTEQ'
--------  RelOperation_1->  LTEQ  RelEquals  RelOperation_1--------
Is 'ϵ' Not Contained in 'LTEQ First Set'
			Compare 'ϵ' To 'LTEQ'
TRUE
'TempFirstY' { '>','<','GTEQ' } U 'LTEQ First Set' { 'LTEQ' } => 'TempFirstY' { '>','<','GTEQ','LTEQ' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '>','<','GTEQ','LTEQ' }
 '>'
 '<'
 'GTEQ'
 'LTEQ'
--------  RelOperation_1->  ϵ--------
'TempFirstY' { '>','<','GTEQ','LTEQ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '>','<','GTEQ','LTEQ','ϵ' }
'TempFirstY' { '>','<','GTEQ','LTEQ','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '>','<','GTEQ','LTEQ','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 'AND'
 'OR'
 ')'
Is $ in Set RelOperation_1 Follow Set
FALSE
'TempFirstY' { '>','<','GTEQ','LTEQ','ϵ' }
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'ϵ'
------- RelEquals --------
################> Rule 1 <#################
--------  RelEquals->  BitwiseOR  RelEquals_1--------
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'BitwiseOR First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'RelEquals Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  RelEquals->  BitwiseOR  RelEquals_1--------
Is 'ϵ' Not Contained in 'BitwiseOR First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'BitwiseOR First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- RelEquals_1 --------
################> Rule 1 <#################
--------  RelEquals_1->  =  BitwiseOR  RelEquals_1--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
******* = ******
^^^^^^^ = ^^^^^^^
--------  RelEquals_1->  #  BitwiseOR  RelEquals_1--------
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'TempFirstY' { } U '# First Set' { '#' } => 'TempFirstY' { '#' }
******* # ******
^^^^^^^ # ^^^^^^^
--------  RelEquals_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'RelEquals_1 Follow Set' { '>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  RelEquals_1->  =  BitwiseOR  RelEquals_1--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=' }
 '='
--------  RelEquals_1->  #  BitwiseOR  RelEquals_1--------
Is 'ϵ' Not Contained in '# First Set'
			Compare 'ϵ' To '#'
TRUE
'TempFirstY' { '=' } U '# First Set' { '#' } => 'TempFirstY' { '=','#' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=','#' }
 '='
 '#'
--------  RelEquals_1->  ϵ--------
'TempFirstY' { '=','#' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','#','ϵ' }
'TempFirstY' { '=','#','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','#','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set RelEquals_1 Follow Set
FALSE
'TempFirstY' { '=','#','ϵ' }
 '='
 '#'
 'ϵ'
------- BitwiseOR --------
################> Rule 1 <#################
--------  BitwiseOR->  BitwiseAND  BitwiseOR_1--------
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'BitwiseAND First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'BitwiseOR Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  BitwiseOR->  BitwiseAND  BitwiseOR_1--------
Is 'ϵ' Not Contained in 'BitwiseAND First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'BitwiseAND First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- BitwiseOR_1 --------
################> Rule 1 <#################
--------  BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1--------
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'TempFirstY' { } U '% First Set' { '%' } => 'TempFirstY' { '%' }
******* % ******
^^^^^^^ % ^^^^^^^
--------  BitwiseOR_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'BitwiseOR_1 Follow Set' { '=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1--------
Is 'ϵ' Not Contained in '% First Set'
			Compare 'ϵ' To '%'
TRUE
'TempFirstY' { } U '% First Set' { '%' } => 'TempFirstY' { '%' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '%' }
 '%'
--------  BitwiseOR_1->  ϵ--------
'TempFirstY' { '%' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '%','ϵ' }
'TempFirstY' { '%','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '%','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set BitwiseOR_1 Follow Set
FALSE
'TempFirstY' { '%','ϵ' }
 '%'
 'ϵ'
------- BitwiseAND --------
################> Rule 1 <#################
--------  BitwiseAND->  BitwiseXOR  BitwiseAND_1--------
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'BitwiseXOR First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'BitwiseAND Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  BitwiseAND->  BitwiseXOR  BitwiseAND_1--------
Is 'ϵ' Not Contained in 'BitwiseXOR First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'BitwiseXOR First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- BitwiseAND_1 --------
################> Rule 1 <#################
--------  BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1--------
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'TempFirstY' { } U '& First Set' { '&' } => 'TempFirstY' { '&' }
******* & ******
^^^^^^^ & ^^^^^^^
--------  BitwiseAND_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'BitwiseAND_1 Follow Set' { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1--------
Is 'ϵ' Not Contained in '& First Set'
			Compare 'ϵ' To '&'
TRUE
'TempFirstY' { } U '& First Set' { '&' } => 'TempFirstY' { '&' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '&' }
 '&'
--------  BitwiseAND_1->  ϵ--------
'TempFirstY' { '&' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '&','ϵ' }
'TempFirstY' { '&','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '&','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set BitwiseAND_1 Follow Set
FALSE
'TempFirstY' { '&','ϵ' }
 '&'
 'ϵ'
------- BitwiseXOR --------
################> Rule 1 <#################
--------  BitwiseXOR->  AddExpr  SimpleRelExpr_1--------
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'AddExpr First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'BitwiseXOR Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  BitwiseXOR->  AddExpr  SimpleRelExpr_1--------
Is 'ϵ' Not Contained in 'AddExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'AddExpr First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- SimpleRelExpr_1 --------
################> Rule 1 <#################
--------  SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1--------
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'TempFirstY' { } U '! First Set' { '!' } => 'TempFirstY' { '!' }
******* ! ******
^^^^^^^ ! ^^^^^^^
--------  SimpleRelExpr_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'SimpleRelExpr_1 Follow Set' { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1--------
Is 'ϵ' Not Contained in '! First Set'
			Compare 'ϵ' To '!'
TRUE
'TempFirstY' { } U '! First Set' { '!' } => 'TempFirstY' { '!' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '!' }
 '!'
--------  SimpleRelExpr_1->  ϵ--------
'TempFirstY' { '!' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '!','ϵ' }
'TempFirstY' { '!','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '!','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '&'
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set SimpleRelExpr_1 Follow Set
FALSE
'TempFirstY' { '!','ϵ' }
 '!'
 'ϵ'
------- AddExpr --------
################> Rule 1 <#################
--------  AddExpr->  ShifExpr  AddExpr_1--------
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'ShifExpr First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'AddExpr Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  AddExpr->  ShifExpr  AddExpr_1--------
Is 'ϵ' Not Contained in 'ShifExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'ShifExpr First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- AddExpr_1 --------
################> Rule 1 <#################
--------  AddExpr_1->  +  ShifExpr  AddExpr_1--------
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'TempFirstY' { } U '+ First Set' { '+' } => 'TempFirstY' { '+' }
******* + ******
^^^^^^^ + ^^^^^^^
--------  AddExpr_1->  -  ShifExpr  AddExpr_1--------
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U '- First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
--------  AddExpr_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'AddExpr_1 Follow Set' { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  AddExpr_1->  +  ShifExpr  AddExpr_1--------
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'TempFirstY' { } U '+ First Set' { '+' } => 'TempFirstY' { '+' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '+' }
 '+'
--------  AddExpr_1->  -  ShifExpr  AddExpr_1--------
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { '+' } U '- First Set' { '-' } => 'TempFirstY' { '+','-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '+','-' }
 '+'
 '-'
--------  AddExpr_1->  ϵ--------
'TempFirstY' { '+','-' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '+','-','ϵ' }
'TempFirstY' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '+','-','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '!'
 '&'
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set AddExpr_1 Follow Set
FALSE
'TempFirstY' { '+','-','ϵ' }
 '+'
 '-'
 'ϵ'
------- ShifExpr --------
################> Rule 1 <#################
--------  ShifExpr->  MultExpr  ShiftExpr_1--------
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'MultExpr First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'ShifExpr Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ShifExpr->  MultExpr  ShiftExpr_1--------
Is 'ϵ' Not Contained in 'MultExpr First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'MultExpr First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- ShiftExpr_1 --------
################> Rule 1 <#################
--------  ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1--------
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'TempFirstY' { } U 'LSH First Set' { 'LSH' } => 'TempFirstY' { 'LSH' }
******* LSH ******
^^^^^^^ LSH ^^^^^^^
--------  ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1--------
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'TempFirstY' { } U 'RSH First Set' { 'RSH' } => 'TempFirstY' { 'RSH' }
******* RSH ******
^^^^^^^ RSH ^^^^^^^
--------  ShiftExpr_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'ShiftExpr_1 Follow Set' { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1--------
Is 'ϵ' Not Contained in 'LSH First Set'
			Compare 'ϵ' To 'LSH'
TRUE
'TempFirstY' { } U 'LSH First Set' { 'LSH' } => 'TempFirstY' { 'LSH' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'LSH' }
 'LSH'
--------  ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1--------
Is 'ϵ' Not Contained in 'RSH First Set'
			Compare 'ϵ' To 'RSH'
TRUE
'TempFirstY' { 'LSH' } U 'RSH First Set' { 'RSH' } => 'TempFirstY' { 'LSH','RSH' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'LSH','RSH' }
 'LSH'
 'RSH'
--------  ShiftExpr_1->  ϵ--------
'TempFirstY' { 'LSH','RSH' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'LSH','RSH','ϵ' }
'TempFirstY' { 'LSH','RSH','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'LSH','RSH','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '+'
 '-'
 '!'
 '&'
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set ShiftExpr_1 Follow Set
FALSE
'TempFirstY' { 'LSH','RSH','ϵ' }
 'LSH'
 'RSH'
 'ϵ'
------- MultExpr --------
################> Rule 1 <#################
--------  MultExpr->  Unary  MultExpr_1--------
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'Unary First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
'MultExpr Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  MultExpr->  Unary  MultExpr_1--------
Is 'ϵ' Not Contained in 'Unary First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U 'Unary First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- MultExpr_1 --------
################> Rule 1 <#################
--------  MultExpr_1->  *  Unary  MultExpr_1--------
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'TempFirstY' { } U '* First Set' { '*' } => 'TempFirstY' { '*' }
******* * ******
^^^^^^^ * ^^^^^^^
--------  MultExpr_1->  /  Unary  MultExpr_1--------
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'TempFirstY' { } U '/ First Set' { '/' } => 'TempFirstY' { '/' }
******* / ******
^^^^^^^ / ^^^^^^^
--------  MultExpr_1->  MOD  Unary  MultExpr_1--------
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'TempFirstY' { } U 'MOD First Set' { 'MOD' } => 'TempFirstY' { 'MOD' }
******* MOD ******
^^^^^^^ MOD ^^^^^^^
--------  MultExpr_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'MultExpr_1 Follow Set' { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  MultExpr_1->  *  Unary  MultExpr_1--------
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'TempFirstY' { } U '* First Set' { '*' } => 'TempFirstY' { '*' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '*' }
 '*'
--------  MultExpr_1->  /  Unary  MultExpr_1--------
Is 'ϵ' Not Contained in '/ First Set'
			Compare 'ϵ' To '/'
TRUE
'TempFirstY' { '*' } U '/ First Set' { '/' } => 'TempFirstY' { '*','/' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '*','/' }
 '*'
 '/'
--------  MultExpr_1->  MOD  Unary  MultExpr_1--------
Is 'ϵ' Not Contained in 'MOD First Set'
			Compare 'ϵ' To 'MOD'
TRUE
'TempFirstY' { '*','/' } U 'MOD First Set' { 'MOD' } => 'TempFirstY' { '*','/','MOD' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '*','/','MOD' }
 '*'
 '/'
 'MOD'
--------  MultExpr_1->  ϵ--------
'TempFirstY' { '*','/','MOD' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '*','/','MOD','ϵ' }
'TempFirstY' { '*','/','MOD','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '*','/','MOD','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 'LSH'
 'RSH'
 '+'
 '-'
 '!'
 '&'
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set MultExpr_1 Follow Set
FALSE
'TempFirstY' { '*','/','MOD','ϵ' }
 '*'
 '/'
 'MOD'
 'ϵ'
------- Unary --------
################> Rule 1 <#################
--------  Unary->  -  Unary--------
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U '- First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
--------  Unary->  Factor--------
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
'Unary Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Unary->  -  Unary--------
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U '- First Set' { '-' } => 'TempFirstY' { '-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
--------  Unary->  Factor--------
Is 'ϵ' Not Contained in 'Factor First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set Factor First Set
TRUE
End of Y1Y2...Yk Chain
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '-' }
 '-'
------- Factor --------
################> Rule 1 <#################
--------  Factor->  Number--------
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'TempFirstY' { } U 'Number First Set' { } => 'TempFirstY' { }
--------  Factor->  FUNCcall--------
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'TempFirstY' { } U 'FUNCcall First Set' { } => 'TempFirstY' { }
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
--------  Factor->  (  ArithExpr  )--------
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'TempFirstY' { } U '( First Set' { '(' } => 'TempFirstY' { '(' }
******* ( ******
^^^^^^^ ( ^^^^^^^
--------  Factor->  MemContents--------
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'TempFirstY' { '@','IDENT','NUMBER' }
******* @ ******
^^^^^^^ @ ^^^^^^^
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'Factor Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Factor->  Number--------
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'TempFirstY' { } U 'Number First Set' { } => 'TempFirstY' { }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { }
--------  Factor->  FUNCcall--------
Is 'ϵ' Not Contained in 'FUNCcall First Set'
TRUE
'TempFirstY' { } U 'FUNCcall First Set' { } => 'TempFirstY' { }
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '*'
 '/'
 'MOD'
 'LSH'
 'RSH'
 '+'
 '-'
 '!'
 '&'
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set Factor Follow Set
FALSE
'TempFirstY' { 'ϵ' }
 'ϵ'
--------  Factor->  (  ArithExpr  )--------
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'TempFirstY' { 'ϵ' } U '( First Set' { '(' } => 'TempFirstY' { 'ϵ','(' }
Is ϵ in Set TempFirstY
TRUE
 '*'
 '/'
 'MOD'
 'LSH'
 'RSH'
 '+'
 '-'
 '!'
 '&'
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set Factor Follow Set
FALSE
'TempFirstY' { 'ϵ','(' }
 'ϵ'
 '('
--------  Factor->  MemContents--------
Is 'ϵ' Not Contained in 'MemContents First Set'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { 'ϵ','(' } U 'MemContents First Set' { '@','IDENT','NUMBER' } => 'TempFirstY' { 'ϵ','(','@','IDENT','NUMBER' }
Is ϵ in Set TempFirstY
TRUE
 '*'
 '/'
 'MOD'
 'LSH'
 'RSH'
 '+'
 '-'
 '!'
 '&'
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set Factor Follow Set
FALSE
'TempFirstY' { 'ϵ','(','@','IDENT','NUMBER' }
 'ϵ'
 '('
 '@'
 'IDENT'
 'NUMBER'
------- CompConst --------
################> Rule 1 <#################
--------  CompConst->  BaseCompConst  CompConst_1--------
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'TempFirstY' { '*','IDENT','NUMBER' }
******* * ******
^^^^^^^ * ^^^^^^^
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'CompConst Follow Set' { ',' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  CompConst->  BaseCompConst  CompConst_1--------
Is 'ϵ' Not Contained in 'BaseCompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'BaseCompConst First Set' { '*','IDENT','NUMBER' } => 'TempFirstY' { '*','IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '*','IDENT','NUMBER' }
 '*'
 'IDENT'
 'NUMBER'
------- CompConst_1 --------
################> Rule 1 <#################
--------  CompConst_1->  +  BaseCompConst  CompConst_1--------
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'TempFirstY' { } U '+ First Set' { '+' } => 'TempFirstY' { '+' }
******* + ******
^^^^^^^ + ^^^^^^^
--------  CompConst_1->  -  BaseCompConst  CompConst_1--------
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { } U '- First Set' { '-' } => 'TempFirstY' { '-' }
******* - ******
^^^^^^^ - ^^^^^^^
--------  CompConst_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'CompConst_1 Follow Set' { ',' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  CompConst_1->  +  BaseCompConst  CompConst_1--------
Is 'ϵ' Not Contained in '+ First Set'
			Compare 'ϵ' To '+'
TRUE
'TempFirstY' { } U '+ First Set' { '+' } => 'TempFirstY' { '+' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '+' }
 '+'
--------  CompConst_1->  -  BaseCompConst  CompConst_1--------
Is 'ϵ' Not Contained in '- First Set'
			Compare 'ϵ' To '-'
TRUE
'TempFirstY' { '+' } U '- First Set' { '-' } => 'TempFirstY' { '+','-' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '+','-' }
 '+'
 '-'
--------  CompConst_1->  ϵ--------
'TempFirstY' { '+','-' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '+','-','ϵ' }
'TempFirstY' { '+','-','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '+','-','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 ','
Is $ in Set CompConst_1 Follow Set
FALSE
'TempFirstY' { '+','-','ϵ' }
 '+'
 '-'
 'ϵ'
------- BaseCompConst --------
################> Rule 1 <#################
--------  BaseCompConst->  Ident--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
--------  BaseCompConst->  Number--------
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'TempFirstY' { } U 'Number First Set' { } => 'TempFirstY' { }
--------  BaseCompConst->  PtrRef--------
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'TempFirstY' { } U 'PtrRef First Set' { } => 'TempFirstY' { }
--------  BaseCompConst->  *--------
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'TempFirstY' { } U '* First Set' { '*' } => 'TempFirstY' { '*' }
******* * ******
^^^^^^^ * ^^^^^^^
'BaseCompConst Follow Set' { '+','-',',' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  BaseCompConst->  Ident--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
--------  BaseCompConst->  Number--------
Is 'ϵ' Not Contained in 'Number First Set'
TRUE
'TempFirstY' { 'IDENT','NUMBER' } U 'Number First Set' { } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
--------  BaseCompConst->  PtrRef--------
Is 'ϵ' Not Contained in 'PtrRef First Set'
TRUE
'TempFirstY' { 'IDENT','NUMBER' } U 'PtrRef First Set' { } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
--------  BaseCompConst->  *--------
Is 'ϵ' Not Contained in '* First Set'
			Compare 'ϵ' To '*'
TRUE
'TempFirstY' { 'IDENT','NUMBER' } U '* First Set' { '*' } => 'TempFirstY' { 'IDENT','NUMBER','*' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER','*' }
 'IDENT'
 'NUMBER'
 '*'
------- FundType --------
################> Rule 1 <#################
--------  FundType->  BOOL--------
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { } U 'BOOL First Set' { 'BOOL' } => 'TempFirstY' { 'BOOL' }
******* BOOL ******
^^^^^^^ BOOL ^^^^^^^
--------  FundType->  CHAR  OptModifier--------
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'TempFirstY' { } U 'CHAR First Set' { 'CHAR' } => 'TempFirstY' { 'CHAR' }
******* CHAR ******
^^^^^^^ CHAR ^^^^^^^
--------  FundType->  BYTE  OptModifier--------
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'TempFirstY' { } U 'BYTE First Set' { 'BYTE' } => 'TempFirstY' { 'BYTE' }
******* BYTE ******
^^^^^^^ BYTE ^^^^^^^
--------  FundType->  INT  OptModifier--------
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'TempFirstY' { } U 'INT First Set' { 'INT' } => 'TempFirstY' { 'INT' }
******* INT ******
^^^^^^^ INT ^^^^^^^
--------  FundType->  CARD  OptModifier--------
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'TempFirstY' { } U 'CARD First Set' { 'CARD' } => 'TempFirstY' { 'CARD' }
******* CARD ******
^^^^^^^ CARD ^^^^^^^
'FundType Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  FundType->  BOOL--------
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { } U 'BOOL First Set' { 'BOOL' } => 'TempFirstY' { 'BOOL' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'BOOL' }
 'BOOL'
--------  FundType->  CHAR  OptModifier--------
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'TempFirstY' { 'BOOL' } U 'CHAR First Set' { 'CHAR' } => 'TempFirstY' { 'BOOL','CHAR' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'BOOL','CHAR' }
 'BOOL'
 'CHAR'
--------  FundType->  BYTE  OptModifier--------
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'TempFirstY' { 'BOOL','CHAR' } U 'BYTE First Set' { 'BYTE' } => 'TempFirstY' { 'BOOL','CHAR','BYTE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'BOOL','CHAR','BYTE' }
 'BOOL'
 'CHAR'
 'BYTE'
--------  FundType->  INT  OptModifier--------
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'TempFirstY' { 'BOOL','CHAR','BYTE' } U 'INT First Set' { 'INT' } => 'TempFirstY' { 'BOOL','CHAR','BYTE','INT' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'BOOL','CHAR','BYTE','INT' }
 'BOOL'
 'CHAR'
 'BYTE'
 'INT'
--------  FundType->  CARD  OptModifier--------
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'TempFirstY' { 'BOOL','CHAR','BYTE','INT' } U 'CARD First Set' { 'CARD' } => 'TempFirstY' { 'BOOL','CHAR','BYTE','INT','CARD' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'BOOL','CHAR','BYTE','INT','CARD' }
 'BOOL'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
------- OptModifier --------
################> Rule 1 <#################
--------  OptModifier->  POINTER--------
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'TempFirstY' { } U 'POINTER First Set' { 'POINTER' } => 'TempFirstY' { 'POINTER' }
******* POINTER ******
^^^^^^^ POINTER ^^^^^^^
--------  OptModifier->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'OptModifier Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  OptModifier->  POINTER--------
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'TempFirstY' { } U 'POINTER First Set' { 'POINTER' } => 'TempFirstY' { 'POINTER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'POINTER' }
 'POINTER'
--------  OptModifier->  ϵ--------
'TempFirstY' { 'POINTER' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'POINTER','ϵ' }
'TempFirstY' { 'POINTER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'POINTER','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set OptModifier Follow Set
FALSE
'TempFirstY' { 'POINTER','ϵ' }
 'POINTER'
 'ϵ'
------- VarDecls --------
################> Rule 1 <#################
--------  VarDecls->  RECORDTYPE  RecIdentLst--------
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'TempFirstY' { } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'TempFirstY' { 'RECORDTYPE' }
******* RECORDTYPE ******
^^^^^^^ RECORDTYPE ^^^^^^^
--------  VarDecls->  CHAR  CharDecl--------
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'TempFirstY' { } U 'CHAR First Set' { 'CHAR' } => 'TempFirstY' { 'CHAR' }
******* CHAR ******
^^^^^^^ CHAR ^^^^^^^
--------  VarDecls->  BYTE  ByteDecl--------
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'TempFirstY' { } U 'BYTE First Set' { 'BYTE' } => 'TempFirstY' { 'BYTE' }
******* BYTE ******
^^^^^^^ BYTE ^^^^^^^
--------  VarDecls->  INT  IntDecl--------
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'TempFirstY' { } U 'INT First Set' { 'INT' } => 'TempFirstY' { 'INT' }
******* INT ******
^^^^^^^ INT ^^^^^^^
--------  VarDecls->  CARD  CardDecl--------
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'TempFirstY' { } U 'CARD First Set' { 'CARD' } => 'TempFirstY' { 'CARD' }
******* CARD ******
^^^^^^^ CARD ^^^^^^^
--------  VarDecls->  BOOL  BOOLDecl--------
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { } U 'BOOL First Set' { 'BOOL' } => 'TempFirstY' { 'BOOL' }
******* BOOL ******
^^^^^^^ BOOL ^^^^^^^
--------  VarDecls->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'VarDecls Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  VarDecls->  RECORDTYPE  RecIdentLst--------
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'TempFirstY' { } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'TempFirstY' { 'RECORDTYPE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'RECORDTYPE' }
 'RECORDTYPE'
--------  VarDecls->  CHAR  CharDecl--------
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'TempFirstY' { 'RECORDTYPE' } U 'CHAR First Set' { 'CHAR' } => 'TempFirstY' { 'RECORDTYPE','CHAR' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'RECORDTYPE','CHAR' }
 'RECORDTYPE'
 'CHAR'
--------  VarDecls->  BYTE  ByteDecl--------
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'TempFirstY' { 'RECORDTYPE','CHAR' } U 'BYTE First Set' { 'BYTE' } => 'TempFirstY' { 'RECORDTYPE','CHAR','BYTE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
--------  VarDecls->  INT  IntDecl--------
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE' } U 'INT First Set' { 'INT' } => 'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
--------  VarDecls->  CARD  CardDecl--------
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT' } U 'CARD First Set' { 'CARD' } => 'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
--------  VarDecls->  BOOL  BOOLDecl--------
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
--------  VarDecls->  ϵ--------
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set VarDecls Follow Set
FALSE
'TempFirstY' { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
 'ϵ'
------- SysDecls --------
################> Rule 1 <#################
--------  SysDecls->  SysDecl  SysDecls_1--------
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
******* DEFINE ******
^^^^^^^ DEFINE ^^^^^^^
******* TYPE ******
^^^^^^^ TYPE ^^^^^^^
******* RECORDTYPE ******
^^^^^^^ RECORDTYPE ^^^^^^^
******* CHAR ******
^^^^^^^ CHAR ^^^^^^^
******* BYTE ******
^^^^^^^ BYTE ^^^^^^^
******* INT ******
^^^^^^^ INT ^^^^^^^
******* CARD ******
^^^^^^^ CARD ^^^^^^^
******* BOOL ******
^^^^^^^ BOOL ^^^^^^^
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'SysDecls Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  SysDecls->  SysDecl  SysDecls_1--------
Is 'ϵ' Not Contained in 'SysDecl First Set'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set SysDecl First Set
TRUE
End of Y1Y2...Yk Chain
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set SysDecls Follow Set
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
 'ϵ'
------- SysDecls_1 --------
################> Rule 1 <#################
--------  SysDecls_1->  ;  SysDecl  SysDecls_1--------
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'TempFirstY' { } U '; First Set' { ';' } => 'TempFirstY' { ';' }
******* ; ******
^^^^^^^ ; ^^^^^^^
--------  SysDecls_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'SysDecls_1 Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  SysDecls_1->  ;  SysDecl  SysDecls_1--------
Is 'ϵ' Not Contained in '; First Set'
			Compare 'ϵ' To ';'
TRUE
'TempFirstY' { } U '; First Set' { ';' } => 'TempFirstY' { ';' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { ';' }
 ';'
--------  SysDecls_1->  ϵ--------
'TempFirstY' { ';' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ';','ϵ' }
'TempFirstY' { ';','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ';','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set SysDecls_1 Follow Set
FALSE
'TempFirstY' { ';','ϵ' }
 ';'
 'ϵ'
------- SysDecl --------
################> Rule 1 <#################
--------  SysDecl->  DEFINE  DefList--------
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'TempFirstY' { } U 'DEFINE First Set' { 'DEFINE' } => 'TempFirstY' { 'DEFINE' }
******* DEFINE ******
^^^^^^^ DEFINE ^^^^^^^
--------  SysDecl->  TYPE  RecIdentList--------
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'TempFirstY' { } U 'TYPE First Set' { 'TYPE' } => 'TempFirstY' { 'TYPE' }
******* TYPE ******
^^^^^^^ TYPE ^^^^^^^
--------  SysDecl->  RECORDTYPE  Modifier  VarList--------
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'TempFirstY' { } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'TempFirstY' { 'RECORDTYPE' }
******* RECORDTYPE ******
^^^^^^^ RECORDTYPE ^^^^^^^
--------  SysDecl->  CHAR  Modifier  VarList--------
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'TempFirstY' { } U 'CHAR First Set' { 'CHAR' } => 'TempFirstY' { 'CHAR' }
******* CHAR ******
^^^^^^^ CHAR ^^^^^^^
--------  SysDecl->  BYTE  Modifier  VarList--------
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'TempFirstY' { } U 'BYTE First Set' { 'BYTE' } => 'TempFirstY' { 'BYTE' }
******* BYTE ******
^^^^^^^ BYTE ^^^^^^^
--------  SysDecl->  INT  Modifier  VarList--------
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'TempFirstY' { } U 'INT First Set' { 'INT' } => 'TempFirstY' { 'INT' }
******* INT ******
^^^^^^^ INT ^^^^^^^
--------  SysDecl->  CARD  Modifier  VarList--------
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'TempFirstY' { } U 'CARD First Set' { 'CARD' } => 'TempFirstY' { 'CARD' }
******* CARD ******
^^^^^^^ CARD ^^^^^^^
--------  SysDecl->  BOOL  VarList--------
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { } U 'BOOL First Set' { 'BOOL' } => 'TempFirstY' { 'BOOL' }
******* BOOL ******
^^^^^^^ BOOL ^^^^^^^
--------  SysDecl->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'SysDecl Follow Set' { ';' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  SysDecl->  DEFINE  DefList--------
Is 'ϵ' Not Contained in 'DEFINE First Set'
			Compare 'ϵ' To 'DEFINE'
TRUE
'TempFirstY' { } U 'DEFINE First Set' { 'DEFINE' } => 'TempFirstY' { 'DEFINE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE' }
 'DEFINE'
--------  SysDecl->  TYPE  RecIdentList--------
Is 'ϵ' Not Contained in 'TYPE First Set'
			Compare 'ϵ' To 'TYPE'
TRUE
'TempFirstY' { 'DEFINE' } U 'TYPE First Set' { 'TYPE' } => 'TempFirstY' { 'DEFINE','TYPE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE','TYPE' }
 'DEFINE'
 'TYPE'
--------  SysDecl->  RECORDTYPE  Modifier  VarList--------
Is 'ϵ' Not Contained in 'RECORDTYPE First Set'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
'TempFirstY' { 'DEFINE','TYPE' } U 'RECORDTYPE First Set' { 'RECORDTYPE' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
--------  SysDecl->  CHAR  Modifier  VarList--------
Is 'ϵ' Not Contained in 'CHAR First Set'
			Compare 'ϵ' To 'CHAR'
TRUE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE' } U 'CHAR First Set' { 'CHAR' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
--------  SysDecl->  BYTE  Modifier  VarList--------
Is 'ϵ' Not Contained in 'BYTE First Set'
			Compare 'ϵ' To 'BYTE'
TRUE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR' } U 'BYTE First Set' { 'BYTE' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
--------  SysDecl->  INT  Modifier  VarList--------
Is 'ϵ' Not Contained in 'INT First Set'
			Compare 'ϵ' To 'INT'
TRUE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' } U 'INT First Set' { 'INT' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
--------  SysDecl->  CARD  Modifier  VarList--------
Is 'ϵ' Not Contained in 'CARD First Set'
			Compare 'ϵ' To 'CARD'
TRUE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' } U 'CARD First Set' { 'CARD' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
--------  SysDecl->  BOOL  VarList--------
Is 'ϵ' Not Contained in 'BOOL First Set'
			Compare 'ϵ' To 'BOOL'
TRUE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' } U 'BOOL First Set' { 'BOOL' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
--------  SysDecl->  ϵ--------
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 ';'
Is $ in Set SysDecl Follow Set
FALSE
'TempFirstY' { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
 'ϵ'
------- DefList --------
################> Rule 1 <#################
--------  DefList->  Def  DefList_1--------
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Def First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'DefList Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  DefList->  Def  DefList_1--------
Is 'ϵ' Not Contained in 'Def First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Def First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
------- DefList_1 --------
################> Rule 1 <#################
--------  DefList_1->  ,  Def  DefList_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
******* , ******
^^^^^^^ , ^^^^^^^
--------  DefList_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'DefList_1 Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  DefList_1->  ,  Def  DefList_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { ',' }
 ','
--------  DefList_1->  ϵ--------
'TempFirstY' { ',' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
'TempFirstY' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set DefList_1 Follow Set
FALSE
'TempFirstY' { ',','ϵ' }
 ','
 'ϵ'
------- Def --------
################> Rule 1 <#################
--------  Def->  Ident  =  Constant--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'Def Follow Set' { ',' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Def->  Ident  =  Constant--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
------- RecIdentList --------
################> Rule 1 <#################
--------  RecIdentList->  RecIdent  RecIdentList--------
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'RecIdentList Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  RecIdentList->  RecIdent  RecIdentList--------
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
------- RecIdent --------
################> Rule 1 <#################
--------  RecIdent->  Ident  =  [  FieldInit  ]--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
--------  RecIdent->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
--------  RecIdent->  Ident  OptRecInit--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'RecIdent Follow Set' { 'IDENT','NUMBER' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  RecIdent->  Ident  =  [  FieldInit  ]--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
--------  RecIdent->  ϵ--------
'TempFirstY' { 'IDENT','NUMBER' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'IDENT','NUMBER','ϵ' }
'TempFirstY' { 'IDENT','NUMBER','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'IDENT','NUMBER','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 'IDENT'
 'NUMBER'
Is $ in Set RecIdent Follow Set
FALSE
'TempFirstY' { 'IDENT','NUMBER','ϵ' }
 'IDENT'
 'NUMBER'
 'ϵ'
--------  RecIdent->  Ident  OptRecInit--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { 'IDENT','NUMBER','ϵ' } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 'IDENT'
 'NUMBER'
Is $ in Set RecIdent Follow Set
FALSE
'TempFirstY' { 'IDENT','NUMBER','ϵ' }
 'IDENT'
 'NUMBER'
 'ϵ'
------- RecIdentLst --------
################> Rule 1 <#################
--------  RecIdentLst->  RecIdent  RecIdentLst_1  RecIdentLst_1--------
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
--------  RecIdentLst->  ,  RecIdent  RecIdentLst_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
******* , ******
^^^^^^^ , ^^^^^^^
--------  RecIdentLst->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'RecIdentLst Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  RecIdentLst->  RecIdent  RecIdentLst_1  RecIdentLst_1--------
Is 'ϵ' Not Contained in 'RecIdent First Set'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set RecIdent First Set
TRUE
End of Y1Y2...Yk Chain
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
--------  RecIdentLst->  ,  RecIdent  RecIdentLst_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { 'IDENT','NUMBER' } U ', First Set' { ',' } => 'TempFirstY' { 'IDENT','NUMBER',',' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER',',' }
 'IDENT'
 'NUMBER'
 ','
--------  RecIdentLst->  ϵ--------
'TempFirstY' { 'IDENT','NUMBER',',' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'IDENT','NUMBER',',','ϵ' }
'TempFirstY' { 'IDENT','NUMBER',',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'IDENT','NUMBER',',','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set RecIdentLst Follow Set
FALSE
'TempFirstY' { 'IDENT','NUMBER',',','ϵ' }
 'IDENT'
 'NUMBER'
 ','
 'ϵ'
------- OptRecInit --------
################> Rule 1 <#################
--------  OptRecInit->  =  Address--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
******* = ******
^^^^^^^ = ^^^^^^^
--------  OptRecInit->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'OptRecInit Follow Set' { 'IDENT','NUMBER' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  OptRecInit->  =  Address--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=' }
 '='
--------  OptRecInit->  ϵ--------
'TempFirstY' { '=' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','ϵ' }
'TempFirstY' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 'IDENT'
 'NUMBER'
Is $ in Set OptRecInit Follow Set
FALSE
'TempFirstY' { '=','ϵ' }
 '='
 'ϵ'
------- BOOLDecl --------
################> Rule 1 <#################
--------  BOOLDecl->  Ident  OptInit  BOOLDecl_1--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'BOOLDecl Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  BOOLDecl->  Ident  OptInit  BOOLDecl_1--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
------- BOOLDecl_1 --------
################> Rule 1 <#################
--------  BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
******* , ******
^^^^^^^ , ^^^^^^^
--------  BOOLDecl_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'BOOLDecl_1 Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { ',' }
 ','
--------  BOOLDecl_1->  ϵ--------
'TempFirstY' { ',' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
'TempFirstY' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set BOOLDecl_1 Follow Set
FALSE
'TempFirstY' { ',','ϵ' }
 ','
 'ϵ'
------- VarList --------
################> Rule 1 <#################
--------  VarList->  VarName  VarList_1--------
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'VarName First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'VarList Follow Set' { ';' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  VarList->  VarName  VarList_1--------
Is 'ϵ' Not Contained in 'VarName First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'VarName First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
------- VarList_1 --------
################> Rule 1 <#################
--------  VarList_1->  ,  VarName  VarList_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
******* , ******
^^^^^^^ , ^^^^^^^
--------  VarList_1->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'VarList_1 Follow Set' { ';' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  VarList_1->  ,  VarName  VarList_1--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { ',' }
 ','
--------  VarList_1->  ϵ--------
'TempFirstY' { ',' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
'TempFirstY' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 ';'
Is $ in Set VarList_1 Follow Set
FALSE
'TempFirstY' { ',','ϵ' }
 ','
 'ϵ'
------- VarName --------
################> Rule 1 <#################
--------  VarName->  Ident  OptInit--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'VarName Follow Set' { ',',';' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  VarName->  Ident  OptInit--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
------- OptInit --------
################> Rule 1 <#################
--------  OptInit->  =  CompConst--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
******* = ******
^^^^^^^ = ^^^^^^^
--------  OptInit->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'OptInit Follow Set' { ',',';' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  OptInit->  =  CompConst--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=' }
 '='
--------  OptInit->  ϵ--------
'TempFirstY' { '=' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','ϵ' }
'TempFirstY' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 ','
 ';'
Is $ in Set OptInit Follow Set
FALSE
'TempFirstY' { '=','ϵ' }
 '='
 'ϵ'
------- Modifier --------
################> Rule 1 <#################
--------  Modifier->  POINTER--------
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'TempFirstY' { } U 'POINTER First Set' { 'POINTER' } => 'TempFirstY' { 'POINTER' }
******* POINTER ******
^^^^^^^ POINTER ^^^^^^^
--------  Modifier->  ARRAY  ArrayStuff--------
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'TempFirstY' { } U 'ARRAY First Set' { 'ARRAY' } => 'TempFirstY' { 'ARRAY' }
******* ARRAY ******
^^^^^^^ ARRAY ^^^^^^^
--------  Modifier->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'Modifier Follow Set' { 'IDENT','NUMBER' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Modifier->  POINTER--------
Is 'ϵ' Not Contained in 'POINTER First Set'
			Compare 'ϵ' To 'POINTER'
TRUE
'TempFirstY' { } U 'POINTER First Set' { 'POINTER' } => 'TempFirstY' { 'POINTER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'POINTER' }
 'POINTER'
--------  Modifier->  ARRAY  ArrayStuff--------
Is 'ϵ' Not Contained in 'ARRAY First Set'
			Compare 'ϵ' To 'ARRAY'
TRUE
'TempFirstY' { 'POINTER' } U 'ARRAY First Set' { 'ARRAY' } => 'TempFirstY' { 'POINTER','ARRAY' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'POINTER','ARRAY' }
 'POINTER'
 'ARRAY'
--------  Modifier->  ϵ--------
'TempFirstY' { 'POINTER','ARRAY' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'POINTER','ARRAY','ϵ' }
'TempFirstY' { 'POINTER','ARRAY','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'POINTER','ARRAY','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 'IDENT'
 'NUMBER'
Is $ in Set Modifier Follow Set
FALSE
'TempFirstY' { 'POINTER','ARRAY','ϵ' }
 'POINTER'
 'ARRAY'
 'ϵ'
------- ArrayStuff --------
################> Rule 1 <#################
--------  ArrayStuff->  (  CompConst  )  OptArrayInit--------
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'TempFirstY' { } U '( First Set' { '(' } => 'TempFirstY' { '(' }
******* ( ******
^^^^^^^ ( ^^^^^^^
--------  ArrayStuff->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'ArrayStuff Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  ArrayStuff->  (  CompConst  )  OptArrayInit--------
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'TempFirstY' { } U '( First Set' { '(' } => 'TempFirstY' { '(' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '(' }
 '('
--------  ArrayStuff->  ϵ--------
'TempFirstY' { '(' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '(','ϵ' }
'TempFirstY' { '(','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '(','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set ArrayStuff Follow Set
FALSE
'TempFirstY' { '(','ϵ' }
 '('
 'ϵ'
------- OptArrayInit --------
################> Rule 1 <#################
--------  OptArrayInit->  =  OptArrayInit_1--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
******* = ******
^^^^^^^ = ^^^^^^^
--------  OptArrayInit->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'OptArrayInit Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  OptArrayInit->  =  OptArrayInit_1--------
Is 'ϵ' Not Contained in '= First Set'
			Compare 'ϵ' To '='
TRUE
'TempFirstY' { } U '= First Set' { '=' } => 'TempFirstY' { '=' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '=' }
 '='
--------  OptArrayInit->  ϵ--------
'TempFirstY' { '=' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','ϵ' }
'TempFirstY' { '=','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '=','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set OptArrayInit Follow Set
FALSE
'TempFirstY' { '=','ϵ' }
 '='
 'ϵ'
------- OptArrayInit_1 --------
################> Rule 1 <#################
--------  OptArrayInit_1->  [  OptArrayInit_2  ]  OptArrayInit_2--------
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'TempFirstY' { } U '[ First Set' { '[' } => 'TempFirstY' { '[' }
******* [ ******
^^^^^^^ [ ^^^^^^^
--------  OptArrayInit_1->  CompConst  OptArrayInit_3--------
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'TempFirstY' { '*','IDENT','NUMBER' }
******* * ******
^^^^^^^ * ^^^^^^^
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'OptArrayInit_1 Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  OptArrayInit_1->  [  OptArrayInit_2  ]  OptArrayInit_2--------
Is 'ϵ' Not Contained in '[ First Set'
			Compare 'ϵ' To '['
TRUE
'TempFirstY' { } U '[ First Set' { '[' } => 'TempFirstY' { '[' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '[' }
 '['
--------  OptArrayInit_1->  CompConst  OptArrayInit_3--------
Is 'ϵ' Not Contained in 'CompConst First Set'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { '[' } U 'CompConst First Set' { '*','IDENT','NUMBER' } => 'TempFirstY' { '[','*','IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '[','*','IDENT','NUMBER' }
 '['
 '*'
 'IDENT'
 'NUMBER'
------- OptArrayInit_3 --------
################> Rule 1 <#################
--------  OptArrayInit_3->  ,  CompConst  OptArrayInit_3--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
******* , ******
^^^^^^^ , ^^^^^^^
--------  OptArrayInit_3->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'OptArrayInit_3 Follow Set' { }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  OptArrayInit_3->  ,  CompConst  OptArrayInit_3--------
Is 'ϵ' Not Contained in ', First Set'
			Compare 'ϵ' To ','
TRUE
'TempFirstY' { } U ', First Set' { ',' } => 'TempFirstY' { ',' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { ',' }
 ','
--------  OptArrayInit_3->  ϵ--------
'TempFirstY' { ',' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
'TempFirstY' { ',','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { ',','ϵ' }
Is ϵ in Set TempFirstY
TRUE
Is $ in Set OptArrayInit_3 Follow Set
FALSE
'TempFirstY' { ',','ϵ' }
 ','
 'ϵ'
------- MemContents --------
################> Rule 1 <#################
--------  MemContents->  Ident  MemContentsType--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
--------  MemContents->  @  Ident--------
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'TempFirstY' { } U '@ First Set' { '@' } => 'TempFirstY' { '@' }
******* @ ******
^^^^^^^ @ ^^^^^^^
'MemContents Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  MemContents->  Ident  MemContentsType--------
Is 'ϵ' Not Contained in 'Ident First Set'
			Compare 'ϵ' To 'IDENT'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'Ident First Set' { 'IDENT','NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
--------  MemContents->  @  Ident--------
Is 'ϵ' Not Contained in '@ First Set'
			Compare 'ϵ' To '@'
TRUE
'TempFirstY' { 'IDENT','NUMBER' } U '@ First Set' { '@' } => 'TempFirstY' { 'IDENT','NUMBER','@' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER','@' }
 'IDENT'
 'NUMBER'
 '@'
------- MemContentsType --------
################> Rule 1 <#################
--------  MemContentsType->  (  ArithExpr  )--------
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'TempFirstY' { } U '( First Set' { '(' } => 'TempFirstY' { '(' }
******* ( ******
^^^^^^^ ( ^^^^^^^
--------  MemContentsType->  ^--------
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'TempFirstY' { } U '^ First Set' { '^' } => 'TempFirstY' { '^' }
******* ^ ******
^^^^^^^ ^ ^^^^^^^
--------  MemContentsType->  .  Ident--------
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'TempFirstY' { } U '. First Set' { '.' } => 'TempFirstY' { '.' }
******* . ******
^^^^^^^ . ^^^^^^^
--------  MemContentsType->  ϵ--------
'TempFirstY' { } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
'TempFirstY' { 'ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { 'ϵ' }
******* ϵ ******
^^^^^^^ ϵ ^^^^^^^
'MemContentsType Follow Set' { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',')' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  MemContentsType->  (  ArithExpr  )--------
Is 'ϵ' Not Contained in '( First Set'
			Compare 'ϵ' To '('
TRUE
'TempFirstY' { } U '( First Set' { '(' } => 'TempFirstY' { '(' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '(' }
 '('
--------  MemContentsType->  ^--------
Is 'ϵ' Not Contained in '^ First Set'
			Compare 'ϵ' To '^'
TRUE
'TempFirstY' { '(' } U '^ First Set' { '^' } => 'TempFirstY' { '(','^' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '(','^' }
 '('
 '^'
--------  MemContentsType->  .  Ident--------
Is 'ϵ' Not Contained in '. First Set'
			Compare 'ϵ' To '.'
TRUE
'TempFirstY' { '(','^' } U '. First Set' { '.' } => 'TempFirstY' { '(','^','.' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { '(','^','.' }
 '('
 '^'
 '.'
--------  MemContentsType->  ϵ--------
'TempFirstY' { '(','^','.' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '(','^','.','ϵ' }
'TempFirstY' { '(','^','.','ϵ' } U 'ϵ First Set' { 'ϵ' } => 'TempFirstY' { '(','^','.','ϵ' }
Is ϵ in Set TempFirstY
TRUE
 '*'
 '/'
 'MOD'
 'LSH'
 'RSH'
 '+'
 '-'
 '!'
 '&'
 '%'
 '='
 '#'
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'AND'
 'OR'
 ')'
Is $ in Set MemContentsType Follow Set
FALSE
'TempFirstY' { '(','^','.','ϵ' }
 '('
 '^'
 '.'
 'ϵ'
------- Ident --------
################> Rule 1 <#################
--------  Ident->  IDENT  Number--------
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'TempFirstY' { } U 'IDENT First Set' { 'IDENT' } => 'TempFirstY' { 'IDENT' }
******* IDENT ******
^^^^^^^ IDENT ^^^^^^^
--------  Ident->  NUMBER--------
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { } U 'NUMBER First Set' { 'NUMBER' } => 'TempFirstY' { 'NUMBER' }
******* NUMBER ******
^^^^^^^ NUMBER ^^^^^^^
'Ident Follow Set' { '+','-',',','=','IDENT','NUMBER','(','^','.','*','/','MOD','LSH','RSH','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR',')',';' }
'Terminals' { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC','FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF','ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE','TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END','@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','(',')','$' }
############< Rule 2 >############
--------  Ident->  IDENT  Number--------
Is 'ϵ' Not Contained in 'IDENT First Set'
			Compare 'ϵ' To 'IDENT'
TRUE
'TempFirstY' { } U 'IDENT First Set' { 'IDENT' } => 'TempFirstY' { 'IDENT' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT' }
 'IDENT'
--------  Ident->  NUMBER--------
Is 'ϵ' Not Contained in 'NUMBER First Set'
			Compare 'ϵ' To 'NUMBER'
TRUE
'TempFirstY' { 'IDENT' } U 'NUMBER First Set' { 'NUMBER' } => 'TempFirstY' { 'IDENT','NUMBER' }
Is ϵ in Set TempFirstY
FALSE
'TempFirstY' { 'IDENT','NUMBER' }
 'IDENT'
 'NUMBER'
xxxxxxxxxxxx Parse Table xxxxxxxxxxxxxxxxx
('Action65','MODULE')   Action65->  Program
('Action65','PROC')   Action65->  Program
('Action65','FUNC')   Action65->  Program
('Action65','DEFINE')   Action65->  Program
('Action65','TYPE')   Action65->  Program
('Action65','RECORDTYPE')   Action65->  Program
('Action65','BOOL')   Action65->  Program
('Action65','CHAR')   Action65->  Program
('Action65','BYTE')   Action65->  Program
('Action65','CARD')   Action65->  Program
('Action65','INT')   Action65->  Program
('Program','MODULE')   Program->  MODULE  Module
('Program','PROC')   Program->  Module
('Program','FUNC')   Program->  Module
('Program','DEFINE')   Program->  Module
('Program','TYPE')   Program->  Module
('Program','RECORDTYPE')   Program->  Module
('Program','BOOL')   Program->  Module
('Program','CHAR')   Program->  Module
('Program','BYTE')   Program->  Module
('Program','CARD')   Program->  Module
('Program','INT')   Program->  Module
('Module','PROC')   Module->  SysDecls  Routine  Module_1
('Module','FUNC')   Module->  SysDecls  Routine  Module_1
('Module','DEFINE')   Module->  SysDecls  Routine  Module_1
('Module','TYPE')   Module->  SysDecls  Routine  Module_1
('Module','RECORDTYPE')   Module->  SysDecls  Routine  Module_1
('Module','BOOL')   Module->  SysDecls  Routine  Module_1
('Module','CHAR')   Module->  SysDecls  Routine  Module_1
('Module','BYTE')   Module->  SysDecls  Routine  Module_1
('Module','CARD')   Module->  SysDecls  Routine  Module_1
('Module','INT')   Module->  SysDecls  Routine  Module_1
('Module_1','IDENT')   Module_1->  ϵ
('Module_1','MODULE')   Module_1->  MODULE  SysDecls  Routine  Module_1
('Module_1','$')   Module_1->  ϵ
('Routine','IDENT')   Routine->  ϵ
('Routine','MODULE')   Routine->  ϵ
('Routine','PROC')   Routine->  PROC  ProcDecl  BEGIN  ProcBody  END  Routine
('Routine','FUNC')   Routine->  FUNC  FundType  ProcDecl  BEGIN  ProcBody  END  Routine
('Routine','$')   Routine->  ϵ
('ProcBody','DEFINE')   ProcBody->  SysDecls  ProcBody_1
('ProcBody','TYPE')   ProcBody->  SysDecls  ProcBody_1
('ProcBody','RECORDTYPE')   ProcBody->  SysDecls  ProcBody_1
('ProcBody','BOOL')   ProcBody->  SysDecls  ProcBody_1
('ProcBody','CHAR')   ProcBody->  SysDecls  ProcBody_1
('ProcBody','BYTE')   ProcBody->  SysDecls  ProcBody_1
('ProcBody','CARD')   ProcBody->  SysDecls  ProcBody_1
('ProcBody','INT')   ProcBody->  SysDecls  ProcBody_1
('ProcDecl','IDENT')   ProcDecl->  Ident  ProcInit  (  VarDecls  )  ProcInit
  ProcDecl->  ϵ
('ProcDecl','NUMBER')   ProcDecl->  Ident  ProcInit  (  VarDecls  )  ProcInit
('ProcDecl','=')   ProcDecl->  =  Address
('Address','IDENT')   Address->  CompConst
('Address','NUMBER')   Address->  CompConst
('Address','*')   Address->  CompConst
('OptReturnData','IDENT')   OptReturnData->  ϵ
('OptReturnData','(')   OptReturnData->  (  ArithExpr  )
('ASSIGNstmt','IDENT')   ASSIGNstmt->  ϵ
('ASSIGNstmt','=')   ASSIGNstmt->  =  ArithExpr
('ASSIGNstmt','==+')   ASSIGNstmt->  ==+  ArithExpr
('ASSIGNstmt','==-')   ASSIGNstmt->  ==-  ArithExpr
('ASSIGNstmt','==*')   ASSIGNstmt->  ==*  ArithExpr
('ASSIGNstmt','==/')   ASSIGNstmt->  ==/  ArithExpr
('ASSIGNstmt','==MOD')   ASSIGNstmt->  ==MOD  ArithExpr
('ASSIGNstmt','==&')   ASSIGNstmt->  ==&  ArithExpr
('ASSIGNstmt','==!')   ASSIGNstmt->  ==!  ArithExpr
('ASSIGNstmt','==XOR')   ASSIGNstmt->  ==XOR  ArithExpr
('ASSIGNstmt','==%')   ASSIGNstmt->  ==%  ArithExpr
('ASSIGNstmt','==LSH')   ASSIGNstmt->  ==LSH  ArithExpr
('ASSIGNstmt','==RSH')   ASSIGNstmt->  ==RSH  ArithExpr
('ELSEIFlist_1','IDENT')   ELSEIFlist_1->  ϵ
('ELSEIFlist_1','ELSEIF')   ELSEIFlist_1->  ELSEIF  CondExpr  THEN  Statements  ELSEIFlist_1
('ELSEstmt','IDENT')   ELSEstmt->  ϵ
('ELSEstmt','ELSE')   ELSEstmt->  ELSE  Statements
('Finish','-')   Finish->  ArithExpr
('STEPoption','IDENT')   STEPoption->  ϵ
('STEPoption','STEP')   STEPoption->  STEP  ArithExpr
('CodeBlock','IDENT')   CodeBlock->  CompConst  CodeBlock_1
('CodeBlock','NUMBER')   CodeBlock->  CompConst  CodeBlock_1
('CodeBlock','*')   CodeBlock->  CompConst  CodeBlock_1
('CodeBlock_1','IDENT')   CodeBlock_1->  ϵ
('CodeBlock_1',',')   CodeBlock_1->  ,  CompConst  CodeBlock_1
('ArithExpr','-')   ArithExpr->  LogicalAND  LogicalOR_1
('LogicalOR_1','IDENT')   LogicalOR_1->  ϵ
('LogicalOR_1','OR')   LogicalOR_1->  OR  LogicalAND  LogicalOR_1
('LogicalOR_1',')')   LogicalOR_1->  ϵ
('LogicalAND','-')   LogicalAND->  RelOperation  LogicalAND_1
('LogicalAND_1','IDENT')   LogicalAND_1->  ϵ
('LogicalAND_1','OR')   LogicalAND_1->  ϵ
('LogicalAND_1','AND')   LogicalAND_1->  AND  RelOperation  LogicalAND_1
('LogicalAND_1',')')   LogicalAND_1->  ϵ
('RelOperation','-')   RelOperation->  RelEquals  RelOperation_1
('RelOperation_1','IDENT')   RelOperation_1->  ϵ
('RelOperation_1','OR')   RelOperation_1->  ϵ
('RelOperation_1','AND')   RelOperation_1->  ϵ
('RelOperation_1','GTEQ')   RelOperation_1->  GTEQ  RelEquals  RelOperation_1
('RelOperation_1','LTEQ')   RelOperation_1->  LTEQ  RelEquals  RelOperation_1
('RelOperation_1','>')   RelOperation_1->  >  RelEquals  RelOperation_1
('RelOperation_1','<')   RelOperation_1->  <  RelEquals  RelOperation_1
('RelOperation_1',')')   RelOperation_1->  ϵ
('RelEquals','-')   RelEquals->  BitwiseOR  RelEquals_1
('RelEquals_1','IDENT')   RelEquals_1->  ϵ
('RelEquals_1','OR')   RelEquals_1->  ϵ
('RelEquals_1','AND')   RelEquals_1->  ϵ
('RelEquals_1','GTEQ')   RelEquals_1->  ϵ
('RelEquals_1','LTEQ')   RelEquals_1->  ϵ
('RelEquals_1','#')   RelEquals_1->  #  BitwiseOR  RelEquals_1
('RelEquals_1','>')   RelEquals_1->  ϵ
('RelEquals_1','<')   RelEquals_1->  ϵ
('RelEquals_1','=')   RelEquals_1->  =  BitwiseOR  RelEquals_1
('RelEquals_1',')')   RelEquals_1->  ϵ
('BitwiseOR','-')   BitwiseOR->  BitwiseAND  BitwiseOR_1
('BitwiseOR_1','IDENT')   BitwiseOR_1->  ϵ
('BitwiseOR_1','OR')   BitwiseOR_1->  ϵ
('BitwiseOR_1','AND')   BitwiseOR_1->  ϵ
('BitwiseOR_1','GTEQ')   BitwiseOR_1->  ϵ
('BitwiseOR_1','LTEQ')   BitwiseOR_1->  ϵ
('BitwiseOR_1','%')   BitwiseOR_1->  %  BitwiseAND  BitwiseOR_1
('BitwiseOR_1','#')   BitwiseOR_1->  ϵ
('BitwiseOR_1','>')   BitwiseOR_1->  ϵ
('BitwiseOR_1','<')   BitwiseOR_1->  ϵ
('BitwiseOR_1','=')   BitwiseOR_1->  ϵ
('BitwiseOR_1',')')   BitwiseOR_1->  ϵ
('BitwiseAND','-')   BitwiseAND->  BitwiseXOR  BitwiseAND_1
('BitwiseAND_1','IDENT')   BitwiseAND_1->  ϵ
('BitwiseAND_1','OR')   BitwiseAND_1->  ϵ
('BitwiseAND_1','AND')   BitwiseAND_1->  ϵ
('BitwiseAND_1','GTEQ')   BitwiseAND_1->  ϵ
('BitwiseAND_1','LTEQ')   BitwiseAND_1->  ϵ
('BitwiseAND_1','&')   BitwiseAND_1->  &  BitwiseXOR  BitwiseAND_1
('BitwiseAND_1','%')   BitwiseAND_1->  ϵ
('BitwiseAND_1','#')   BitwiseAND_1->  ϵ
('BitwiseAND_1','>')   BitwiseAND_1->  ϵ
('BitwiseAND_1','<')   BitwiseAND_1->  ϵ
('BitwiseAND_1','=')   BitwiseAND_1->  ϵ
('BitwiseAND_1',')')   BitwiseAND_1->  ϵ
('BitwiseXOR','-')   BitwiseXOR->  AddExpr  SimpleRelExpr_1
('SimpleRelExpr_1','IDENT')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','OR')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','AND')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','GTEQ')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','LTEQ')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','!')   SimpleRelExpr_1->  !  AddExpr  SimpleRelExpr_1
('SimpleRelExpr_1','&')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','%')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','#')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','>')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','<')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1','=')   SimpleRelExpr_1->  ϵ
('SimpleRelExpr_1',')')   SimpleRelExpr_1->  ϵ
('AddExpr','-')   AddExpr->  ShifExpr  AddExpr_1
('AddExpr_1','IDENT')   AddExpr_1->  ϵ
('AddExpr_1','OR')   AddExpr_1->  ϵ
('AddExpr_1','AND')   AddExpr_1->  ϵ
('AddExpr_1','GTEQ')   AddExpr_1->  ϵ
('AddExpr_1','LTEQ')   AddExpr_1->  ϵ
('AddExpr_1','!')   AddExpr_1->  ϵ
('AddExpr_1','&')   AddExpr_1->  ϵ
('AddExpr_1','%')   AddExpr_1->  ϵ
('AddExpr_1','#')   AddExpr_1->  ϵ
('AddExpr_1','>')   AddExpr_1->  ϵ
('AddExpr_1','<')   AddExpr_1->  ϵ
('AddExpr_1','=')   AddExpr_1->  ϵ
('AddExpr_1','+')   AddExpr_1->  +  ShifExpr  AddExpr_1
('AddExpr_1','-')   AddExpr_1->  -  ShifExpr  AddExpr_1
('AddExpr_1',')')   AddExpr_1->  ϵ
('ShifExpr','-')   ShifExpr->  MultExpr  ShiftExpr_1
('ShiftExpr_1','IDENT')   ShiftExpr_1->  ϵ
('ShiftExpr_1','OR')   ShiftExpr_1->  ϵ
('ShiftExpr_1','AND')   ShiftExpr_1->  ϵ
('ShiftExpr_1','GTEQ')   ShiftExpr_1->  ϵ
('ShiftExpr_1','LTEQ')   ShiftExpr_1->  ϵ
('ShiftExpr_1','!')   ShiftExpr_1->  ϵ
('ShiftExpr_1','&')   ShiftExpr_1->  ϵ
('ShiftExpr_1','%')   ShiftExpr_1->  ϵ
('ShiftExpr_1','#')   ShiftExpr_1->  ϵ
('ShiftExpr_1','>')   ShiftExpr_1->  ϵ
('ShiftExpr_1','<')   ShiftExpr_1->  ϵ
('ShiftExpr_1','=')   ShiftExpr_1->  ϵ
('ShiftExpr_1','+')   ShiftExpr_1->  ϵ
('ShiftExpr_1','-')   ShiftExpr_1->  ϵ
('ShiftExpr_1','LSH')   ShiftExpr_1->  LSH  MultExpr  ShiftExpr_1
('ShiftExpr_1','RSH')   ShiftExpr_1->  RSH  MultExpr  ShiftExpr_1
('ShiftExpr_1',')')   ShiftExpr_1->  ϵ
('MultExpr','-')   MultExpr->  Unary  MultExpr_1
('MultExpr_1','IDENT')   MultExpr_1->  ϵ
('MultExpr_1','OR')   MultExpr_1->  ϵ
('MultExpr_1','AND')   MultExpr_1->  ϵ
('MultExpr_1','GTEQ')   MultExpr_1->  ϵ
('MultExpr_1','LTEQ')   MultExpr_1->  ϵ
('MultExpr_1','!')   MultExpr_1->  ϵ
('MultExpr_1','&')   MultExpr_1->  ϵ
('MultExpr_1','%')   MultExpr_1->  ϵ
('MultExpr_1','#')   MultExpr_1->  ϵ
('MultExpr_1','>')   MultExpr_1->  ϵ
('MultExpr_1','<')   MultExpr_1->  ϵ
('MultExpr_1','=')   MultExpr_1->  ϵ
('MultExpr_1','+')   MultExpr_1->  ϵ
('MultExpr_1','-')   MultExpr_1->  ϵ
('MultExpr_1','*')   MultExpr_1->  *  Unary  MultExpr_1
('MultExpr_1','/')   MultExpr_1->  /  Unary  MultExpr_1
('MultExpr_1','MOD')   MultExpr_1->  MOD  Unary  MultExpr_1
('MultExpr_1','LSH')   MultExpr_1->  ϵ
('MultExpr_1','RSH')   MultExpr_1->  ϵ
('MultExpr_1',')')   MultExpr_1->  ϵ
('Unary','-')   Unary->  -  Unary
('Factor','IDENT')   Factor->  FUNCcall
  Factor->  MemContents
('Factor','OR')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','AND')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','GTEQ')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','LTEQ')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','NUMBER')   Factor->  MemContents
('Factor','@')   Factor->  MemContents
('Factor','!')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','&')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','%')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','#')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','>')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','<')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','=')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','+')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','-')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','*')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','/')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','MOD')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','LSH')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','RSH')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('Factor','(')   Factor->  (  ArithExpr  )
('Factor',')')   Factor->  FUNCcall
  Factor->  (  ArithExpr  )
  Factor->  MemContents
('CompConst','IDENT')   CompConst->  BaseCompConst  CompConst_1
('CompConst','NUMBER')   CompConst->  BaseCompConst  CompConst_1
('CompConst','*')   CompConst->  BaseCompConst  CompConst_1
('CompConst_1','IDENT')   CompConst_1->  ϵ
('CompConst_1',',')   CompConst_1->  ϵ
('CompConst_1','+')   CompConst_1->  +  BaseCompConst  CompConst_1
('CompConst_1','-')   CompConst_1->  -  BaseCompConst  CompConst_1
('BaseCompConst','IDENT')   BaseCompConst->  Ident
('BaseCompConst','NUMBER')   BaseCompConst->  Ident
('BaseCompConst','*')   BaseCompConst->  *
('FundType','BOOL')   FundType->  BOOL
('FundType','CHAR')   FundType->  CHAR  OptModifier
('FundType','BYTE')   FundType->  BYTE  OptModifier
('FundType','CARD')   FundType->  CARD  OptModifier
('FundType','INT')   FundType->  INT  OptModifier
('OptModifier','IDENT')   OptModifier->  ϵ
('OptModifier','POINTER')   OptModifier->  POINTER
('VarDecls','IDENT')   VarDecls->  ϵ
('VarDecls','RECORDTYPE')   VarDecls->  RECORDTYPE  RecIdentLst
('VarDecls','BOOL')   VarDecls->  BOOL  BOOLDecl
('VarDecls','CHAR')   VarDecls->  CHAR  CharDecl
('VarDecls','BYTE')   VarDecls->  BYTE  ByteDecl
('VarDecls','CARD')   VarDecls->  CARD  CardDecl
('VarDecls','INT')   VarDecls->  INT  IntDecl
('SysDecls','IDENT')   SysDecls->  SysDecl  SysDecls_1
('SysDecls','DEFINE')   SysDecls->  SysDecl  SysDecls_1
('SysDecls','TYPE')   SysDecls->  SysDecl  SysDecls_1
('SysDecls','RECORDTYPE')   SysDecls->  SysDecl  SysDecls_1
('SysDecls','BOOL')   SysDecls->  SysDecl  SysDecls_1
('SysDecls','CHAR')   SysDecls->  SysDecl  SysDecls_1
('SysDecls','BYTE')   SysDecls->  SysDecl  SysDecls_1
('SysDecls','CARD')   SysDecls->  SysDecl  SysDecls_1
('SysDecls','INT')   SysDecls->  SysDecl  SysDecls_1
('SysDecls_1','IDENT')   SysDecls_1->  ϵ
('SysDecls_1',';')   SysDecls_1->  ;  SysDecl  SysDecls_1
('SysDecl','IDENT')   SysDecl->  ϵ
('SysDecl','DEFINE')   SysDecl->  DEFINE  DefList
('SysDecl','TYPE')   SysDecl->  TYPE  RecIdentList
('SysDecl','RECORDTYPE')   SysDecl->  RECORDTYPE  Modifier  VarList
('SysDecl','BOOL')   SysDecl->  BOOL  VarList
('SysDecl','CHAR')   SysDecl->  CHAR  Modifier  VarList
('SysDecl','BYTE')   SysDecl->  BYTE  Modifier  VarList
('SysDecl','CARD')   SysDecl->  CARD  Modifier  VarList
('SysDecl','INT')   SysDecl->  INT  Modifier  VarList
('SysDecl',';')   SysDecl->  ϵ
('DefList','IDENT')   DefList->  Def  DefList_1
('DefList','NUMBER')   DefList->  Def  DefList_1
('DefList_1','IDENT')   DefList_1->  ϵ
('DefList_1',',')   DefList_1->  ,  Def  DefList_1
('Def','IDENT')   Def->  Ident  =  Constant
('Def','NUMBER')   Def->  Ident  =  Constant
('RecIdentList','IDENT')   RecIdentList->  RecIdent  RecIdentList
('RecIdentList','NUMBER')   RecIdentList->  RecIdent  RecIdentList
('RecIdent','IDENT')   RecIdent->  Ident  =  [  FieldInit  ]
  RecIdent->  ϵ
  RecIdent->  Ident  OptRecInit
('RecIdent','NUMBER')   RecIdent->  Ident  =  [  FieldInit  ]
  RecIdent->  Ident  OptRecInit
  RecIdent->  ϵ
('RecIdentLst','IDENT')   RecIdentLst->  RecIdent  RecIdentLst_1  RecIdentLst_1
  RecIdentLst->  ϵ
('RecIdentLst','NUMBER')   RecIdentLst->  RecIdent  RecIdentLst_1  RecIdentLst_1
('RecIdentLst',',')   RecIdentLst->  ,  RecIdent  RecIdentLst_1
('OptRecInit','IDENT')   OptRecInit->  ϵ
('OptRecInit','NUMBER')   OptRecInit->  ϵ
('OptRecInit','=')   OptRecInit->  =  Address
('BOOLDecl','IDENT')   BOOLDecl->  Ident  OptInit  BOOLDecl_1
('BOOLDecl','NUMBER')   BOOLDecl->  Ident  OptInit  BOOLDecl_1
('BOOLDecl_1','IDENT')   BOOLDecl_1->  ϵ
('BOOLDecl_1',',')   BOOLDecl_1->  ,  Ident  OptInit  BOOLDecl_1
('VarList','IDENT')   VarList->  VarName  VarList_1
('VarList','NUMBER')   VarList->  VarName  VarList_1
('VarList_1','IDENT')   VarList_1->  ϵ
('VarList_1',',')   VarList_1->  ,  VarName  VarList_1
('VarList_1',';')   VarList_1->  ϵ
('VarName','IDENT')   VarName->  Ident  OptInit
('VarName','NUMBER')   VarName->  Ident  OptInit
('OptInit','IDENT')   OptInit->  ϵ
('OptInit','=')   OptInit->  =  CompConst
('OptInit',',')   OptInit->  ϵ
('OptInit',';')   OptInit->  ϵ
('Modifier','IDENT')   Modifier->  ϵ
('Modifier','NUMBER')   Modifier->  ϵ
('Modifier','POINTER')   Modifier->  POINTER
('Modifier','ARRAY')   Modifier->  ARRAY  ArrayStuff
('ArrayStuff','IDENT')   ArrayStuff->  ϵ
('ArrayStuff','(')   ArrayStuff->  (  CompConst  )  OptArrayInit
('OptArrayInit','IDENT')   OptArrayInit->  ϵ
('OptArrayInit','=')   OptArrayInit->  =  OptArrayInit_1
('OptArrayInit_1','IDENT')   OptArrayInit_1->  CompConst  OptArrayInit_3
('OptArrayInit_1','NUMBER')   OptArrayInit_1->  CompConst  OptArrayInit_3
('OptArrayInit_1','[')   OptArrayInit_1->  [  OptArrayInit_2  ]  OptArrayInit_2
('OptArrayInit_1','*')   OptArrayInit_1->  CompConst  OptArrayInit_3
('OptArrayInit_3','IDENT')   OptArrayInit_3->  ϵ
('OptArrayInit_3',',')   OptArrayInit_3->  ,  CompConst  OptArrayInit_3
('MemContents','IDENT')   MemContents->  Ident  MemContentsType
('MemContents','NUMBER')   MemContents->  Ident  MemContentsType
('MemContents','@')   MemContents->  @  Ident
('MemContentsType','IDENT')   MemContentsType->  ϵ
('MemContentsType','OR')   MemContentsType->  ϵ
('MemContentsType','AND')   MemContentsType->  ϵ
('MemContentsType','GTEQ')   MemContentsType->  ϵ
('MemContentsType','LTEQ')   MemContentsType->  ϵ
('MemContentsType','.')   MemContentsType->  .  Ident
('MemContentsType','^')   MemContentsType->  ^
('MemContentsType','!')   MemContentsType->  ϵ
('MemContentsType','&')   MemContentsType->  ϵ
('MemContentsType','%')   MemContentsType->  ϵ
('MemContentsType','#')   MemContentsType->  ϵ
('MemContentsType','>')   MemContentsType->  ϵ
('MemContentsType','<')   MemContentsType->  ϵ
('MemContentsType','=')   MemContentsType->  ϵ
('MemContentsType','+')   MemContentsType->  ϵ
('MemContentsType','-')   MemContentsType->  ϵ
('MemContentsType','*')   MemContentsType->  ϵ
('MemContentsType','/')   MemContentsType->  ϵ
('MemContentsType','MOD')   MemContentsType->  ϵ
('MemContentsType','LSH')   MemContentsType->  ϵ
('MemContentsType','RSH')   MemContentsType->  ϵ
('MemContentsType','(')   MemContentsType->  (  ArithExpr  )
('MemContentsType',')')   MemContentsType->  ϵ
('Ident','IDENT')   Ident->  IDENT  Number
('Ident','NUMBER')   Ident->  NUMBER
Table Entries = 391
